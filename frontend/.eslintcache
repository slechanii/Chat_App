[{"/home/slechani/chat_app/frontend/src/reportWebVitals.js":"1","/home/slechani/chat_app/frontend/src/Pages/Register.js":"2","/home/slechani/chat_app/frontend/src/Components/Chat.js":"3","/home/slechani/chat_app/frontend/src/Components/Chatbox.js":"4","/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js":"5","/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js":"6","/home/slechani/chat_app/frontend/src/Components/Message.js":"7","/home/slechani/chat_app/frontend/src/index.js":"8","/home/slechani/chat_app/frontend/src/Pages/Login.js":"9","/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js":"10","/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js":"11","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js":"12","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js":"13","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js":"14","/home/slechani/chat_app/frontend/src/Components/UserListModal.js":"15","/home/slechani/chat_app/frontend/src/App.js":"16","/home/slechani/chat_app/frontend/src/Components/ChatHeader.js":"17","/home/slechani/chat_app/frontend/src/Components/DateSeparator.js":"18","/home/slechani/chat_app/frontend/src/Pages/Workspace.js":"19","/home/slechani/chat_app/frontend/src/Components/AddUsersModal.js":"20","/home/slechani/chat_app/frontend/src/Components/WorkspaceName.js":"21","/home/slechani/chat_app/frontend/src/Components/AddUserSearchbar.js":"22","/home/slechani/chat_app/frontend/src/Components/SendMessageModal.js":"23","/home/slechani/chat_app/frontend/src/Components/DirectMessageSearchbar.js":"24","/home/slechani/chat_app/frontend/src/Components/UserProfileMenu.js":"25","/home/slechani/chat_app/frontend/src/Components/EditProfileModal.js":"26","/home/slechani/chat_app/frontend/src/Components/UserProfilePopup.js":"27","/home/slechani/chat_app/frontend/src/Components/UnreadMessagesNotif.js":"28"},{"size":362,"mtime":1607523001563,"results":"29","hashOfConfig":"30"},{"size":3149,"mtime":1614092265644,"results":"31","hashOfConfig":"30"},{"size":4476,"mtime":1613159949382,"results":"32","hashOfConfig":"30"},{"size":6913,"mtime":1610862334604,"results":"33","hashOfConfig":"30"},{"size":5535,"mtime":1612811307102,"results":"34","hashOfConfig":"30"},{"size":2350,"mtime":1608910683121,"results":"35","hashOfConfig":"30"},{"size":1909,"mtime":1612806985520,"results":"36","hashOfConfig":"30"},{"size":628,"mtime":1608439606892,"results":"37","hashOfConfig":"30"},{"size":2890,"mtime":1614092643086,"results":"38","hashOfConfig":"30"},{"size":3467,"mtime":1612806826449,"results":"39","hashOfConfig":"30"},{"size":4288,"mtime":1611048334207,"results":"40","hashOfConfig":"30"},{"size":3312,"mtime":1612811037434,"results":"41","hashOfConfig":"30"},{"size":5807,"mtime":1613155544814,"results":"42","hashOfConfig":"30"},{"size":4447,"mtime":1611082381430,"results":"43","hashOfConfig":"30"},{"size":2857,"mtime":1612797089764,"results":"44","hashOfConfig":"30"},{"size":615,"mtime":1608439575519,"results":"45","hashOfConfig":"30"},{"size":4816,"mtime":1612813987097,"results":"46","hashOfConfig":"30"},{"size":901,"mtime":1610870081291,"results":"47","hashOfConfig":"30"},{"size":2959,"mtime":1613154067619,"results":"48","hashOfConfig":"30"},{"size":1696,"mtime":1610995686766,"results":"49","hashOfConfig":"30"},{"size":1241,"mtime":1608746465054,"results":"50","hashOfConfig":"30"},{"size":2927,"mtime":1610979323789,"results":"51","hashOfConfig":"30"},{"size":1803,"mtime":1612805309855,"results":"52","hashOfConfig":"30"},{"size":2868,"mtime":1611080783871,"results":"53","hashOfConfig":"30"},{"size":1700,"mtime":1612797101399,"results":"54","hashOfConfig":"30"},{"size":3589,"mtime":1611142999639,"results":"55","hashOfConfig":"30"},{"size":2878,"mtime":1612807011784,"results":"56","hashOfConfig":"30"},{"size":420,"mtime":1613154789157,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"nhe71c",{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"68"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"75"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"87"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"87"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"68"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"75"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"75"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"87"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"75"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"75"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"75"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"87"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"75"},"/home/slechani/chat_app/frontend/src/reportWebVitals.js",[],["142","143"],"/home/slechani/chat_app/frontend/src/Pages/Register.js",["144","145","146","147","148","149"],"/home/slechani/chat_app/frontend/src/Components/Chat.js",["150","151","152","153","154"],"/home/slechani/chat_app/frontend/src/Components/Chatbox.js",["155","156","157","158","159","160","161","162","163","164","165","166","167"],"\n\nimport React, { Component } from 'react'\nimport { Grid, Input, GridRow, Container, TextArea, Button, ButtonGroup, Icon } from 'semantic-ui-react'\nimport Axios from 'axios';\nimport configData from  \"../config.json\";\nimport 'react-quill/dist/quill.snow.css';\nimport ReactQuill, {Quill} from 'react-quill';\n\n\nconst CustomButton = () => <Icon name=\"send\"></Icon>\n// const CustomToolbar = () => (\n//     <div id=\"toolbar\">\n//       {/* \"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\", {insertStar: this.insertStar} */}\n//       <button className=\"ql-bold\"></button>\n//       <button className=\"ql-italic\"></button>\n//       <button className=\"ql-strike\"></button>    \n//       <button className=\"ql-underline\"></button>    \n//       <button className=\"ql-blockquote\"></button>        \n//       <button className=\"ql-send-message\" onClick={this.props.sendMessage}>\n//         <CustomButton />\n//       </button>\n//     </div>\n//   )\n\n  class CustomToolbar extends Component { \n\n    constructor(props){\n        super(props)\n    }\n      render() {\n          \n        return(\n    <div id=\"toolbar\">\n      {/* \"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\", {insertStar: this.insertStar} */}\n      <button className=\"ql-bold\"></button>\n      <button className=\"ql-italic\"></button>\n      <button className=\"ql-strike\"></button>    \n      <button className=\"ql-underline\"></button>    \n      <button className=\"ql-blockquote\"></button>        \n      <button className=\"ql-send-message\" onClick={() => {this.props.sendMessage(false)}}>\n        <CustomButton />\n      </button>\n    </div>\n  )\n      }\n  }\n\n  function insertStar()  {\n    alert(\"star\")\n}\n\nexport default class Chatbox extends Component {\n\n    constructor(props)\n    {\n        super(props);\n    }\n    state = {\n        messageContent : \"\",       \n        oldValue: \"\",\n        value: \"\",\n    }\n\n\n\n    onChangeMessage = (html) => {\n        this.setState({oldValue: this.state.messageContent, messageContent: html})\n    }\n\n    handleKey = (event) => {\n        if (event.key == \"Enter\" && !event.shiftKey)\n        {            \n            this.setState({messageContent: \"\"})\n            event.preventDefault();\n            this.sendMessage(true)\n            event.stopPropagation();\n            return false\n        }\n    }\n\n    cleanMessage = (message) => {\n        message = message.replace(/<p><\\/\\p>/g, \"\")\n        message = message.replace(/<p><br><\\/p>/g, \"\")\n        message = message.replace(/<br>/g, \"\")\n        return message\n    }\n\n    sendMessage = (from_enter_key) => {\n   \n        let message = \"\"\n        if (from_enter_key)\n            message = this.state.oldValue\n        else\n            message = this.state.messageContent\n        let message_to_send = {       \n            content:  this.cleanMessage(message),\n            sender_id: localStorage.getItem(\"user_id\"),\n            destination_id: window.location.pathname.split('/')[2], \n        }\n      Axios.post(configData.SERVER_URL + \"messages/\", message_to_send)\n           .then((res) => {\n               this.props.refreshMessages()\n               this.setState({messageContent:\"\"})\n               this.setState({oldValue:\"\"})\n           })\n           .catch((err) => {\n               console.log(err)\n           })\n    }\n\n\n    render() {\n        const {value, setValue} = this.state\n        const quillToolbar = {\n            history: {\n                delay: 1000,\n                maxStack: 100,\n                userOnly: false\n              },\n            toolbar: [\"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\", {insertStar: this.insertStar}\n        ],\n\n\n            clipboard: {\n                matchVisual: false\n            },\n   \n          };\n        //   alert(\"name in box : \" + this.props.channel)\n        return (\n            \n            <Grid.Row className=\"chatbox-container\">\n            \n            {/* <ReactQuill value={this.state.messageContent} onKeyDown={(e) => {this.handleKey(e)}}  ref={(el) => {this.reactQuillRef = el}} className=\"chatbox-wrapper\" modules={quillToolbar} theme=\"snow\" onChange={this.onChangeMessage} > */}\n            <ReactQuill key={this.props.channelName} placeholder={\"Write a message to #\" + this.props.channelName} value={this.state.messageContent} onKeyDown={(e) => {this.handleKey(e)}}  ref={(el) => {this.reactQuillRef = el}} className=\"chatbox-wrapper\" modules={Chatbox.modules} theme=\"snow\" onChange={this.onChangeMessage} >\n              {/* <div className=\"chatbox-input\"/> */}\n              </ReactQuill> \n              <CustomToolbar sendMessage={this.sendMessage}></CustomToolbar>\n  \n                {/* <Grid className=\"chatbox\">\n                    <Grid.Row className=\"chatbox-textarea-row\">\n                    <form className=\"unstyled\" id=\"textarea-chat\">\n                        <TextArea  name=\"messageContent\" onChange={this.handleChange} placeholder=\"Send a message to #channel\" className=\"chatbox-input\"></TextArea>\n                    </form>\n                    </Grid.Row>\n                    <GridRow className=\"chatbox-formatting-row\">\n                        <Button.Group>\n                            <Button icon>\n                                <Icon name='bold' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='italic' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='strikethrough' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='code' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='ordered list' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='bulleted list' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='quote left' />\n                            </Button>\n                        </Button.Group>\n                    \n                            <Button onClick={this.sendMessage} icon>\n                                <Icon name='send' />\n                            </Button>\n                       \n\n\n                    </GridRow>\n                </Grid> */}\n\n            </Grid.Row>\n\n\n\n        )\n    }\n}\n\nChatbox.modules = {\n    toolbar: {\n      container: \"#toolbar\",\n      handlers: {\n        \"insertStar\": insertStar,\n      }\n    }\n  }\n  \n  /*\n   * Quill editor formats\n   * See http://quilljs.com/docs/formats/\n   */\n  Chatbox.formats = [\n    \"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\"\n  ]\n",["168","169"],"/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js",["170","171","172","173","174","175"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaUser, FaUserAlt, FaPlus } from 'react-icons/fa';\nimport { Redirect } from \"react-router-dom\";\nimport SendMessageModal from './SendMessageModal';\n\nexport default class MessagesMenu extends Component {\n    state = {\n        activeIndex: 0,\n        hover: false,\n        channels: [],\n        profile_id: null,\n        redirect: false,\n        channel_to_load: null,\n        display_channels: false,\n    };\n\n    loadChannel = (channel_id) => {\n        const url = \"/workspace/\" + channel_id\n        this.setState({ redirect: true })\n        this.setState({ channel_to_load: url })\n    }\n\n    getActiveChannel = () => {\n        let url = window.location.pathname\n        url = url.split('/')[2]\n        return (parseInt(url))\n    }\n\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({hover: mouse_status})\n    }\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        const channels = this.props.channels.map((data, idx) => {\n            var active_channel = false\n            let channel_name = \"\"\n            if (data.usernames.indexOf(localStorage.getItem(\"username\")) === 0)\n                channel_name = data.usernames[1]\n            else\n                channel_name = data.usernames[0]\n            if (data.id === this.getActiveChannel()) {\n                active_channel = true\n            }\n\n            // Display channel if rendering fav list OR Display if rendering regular channels and channel isn't in fav list  \n                 return (\n  \n                    <List.Item onClick={() => { this.loadChannel(data.id) }} className={`workspace-submenu-row-item ${active_channel ? \"active-item\" : \"\"}`} >\n                        <List.Icon > <FaHashtag></FaHashtag></List.Icon>\n                        <List.Content className=\"channel-title-menu\">\n                            {channel_name}\n                        </List.Content>\n                    </List.Item>\n                )\n        })\n        if (this.state.redirect === true) {\n            this.setState({ redirect: false })\n            this.setState({ channel_to_load: null })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={this.state.channel_to_load} />\n        }\n        const { activeIndex } = this.state\n        return (\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                <GridColumn className=\"no-padding\" width=\"16\">\n                    <Accordion>\n                        <Accordion.Title  onMouseEnter={() => {this.handleHover(true)}} onMouseLeave={() => {this.handleHover(false)}} className=\"workspace-submenu-row\"\n                            active={activeIndex === 0}\n                            index={0}\n                            onClick={this.handleClick}\n                           \n                        >\n                                <Icon className=\"white\" color=\"white\" name=\"dropdown\"></Icon>\n                            <span className=\"bold white\">Direct messages</span>\n\n                            {/* Start chat hover icon */}\n                            { this.state.hover === true &&\n                            <span className=\"menu-side-icon-container\">\n                                <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                            </span>\n                            }\n                        </Accordion.Title>\n                        <Accordion.Content active={activeIndex === 0}>\n                            <List className=\"collapsible-menu-list\">\n                            {channels}\n                                {/* <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>admin</span>\n                                        <span>you</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>John</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>Jane</span>\n                                    </List.Content>\n                                </List.Item> */}\n                                <SendMessageModal reload={this.props.refreshChannels}></SendMessageModal>\n\n                            </List>\n                        </Accordion.Content>\n                    </Accordion>\n                </GridColumn>\n            </GridRow>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js",["176","177","178","179"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class ChangeTopic extends Component {\n  \n    state = {\n        open: false,\n        channel_topic: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    setTopic = () => {\n        const req_body = {\n            topic: this.state.channel_topic,            \n        }\n\n       Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_topic} = this.state \n        return (\n            <Modal className=\"\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"mini\"\n                trigger={<Button id=\"chat-channel-topic\" className=\"unstyled\">{this.props.topic}</Button>}\n            >\n                <Modal.Header className=\"create-chan-header\">Edit channel topic</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Form class=\"\">\n                        <Form.Field required>\n                        \n                        <Form.Input\n                                placeholder='Channel topic'\n                                name='channel_topic'\n                                label=\"Channel topic\"\n                                onChange={this.handleChange}                             \n                            />\n                        </Form.Field>\n                       \n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.setTopic}>\n                    Set Topic\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n",["180","181"],"/home/slechani/chat_app/frontend/src/Components/Message.js",["182","183","184"],"import React, { Component } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport UserProfileMenu from \"./UserProfileMenu\";\nimport UserProfilePopup from \"./UserProfilePopup\";\n\nexport default class Message extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  state = {};\n\n  render() {\n    let local_date = new Date(this.props.date);\n    let time = local_date.toLocaleTimeString(navigator.language, {\n      hour: \"2-digit\",\n      minute: \"2-digit\"\n    });\n    let username_trigger = (\n      <span className=\"chat-message-username\">{this.props.username}</span>\n    );\n    return (\n      <div className=\"message-row\">\n        <div className=\"message-left-col\">\n          {this.props.showUsername === false && (\n            <span className=\"chat-message-side-time\">{time}</span>\n          )}\n          {this.props.showUsername === true && (\n              <UserProfilePopup profile_id={this.props.profile_id} refreshChannels={this.props.refreshChannels} username={this.props.username}></UserProfilePopup>\n            // <UserProfileMenu isUsername={true}></UserProfileMenu>\n          \n        //   <UserProfileMenu trigger={<img id=\"profile-img-chat-message\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48\"></img>}></UserProfileMenu>\n          )  \n        }\n        </div>\n        <div className=\"message-right-col\">\n          {this.props.showUsername === true && (\n            <div className=\"chat-message-header\">\n              {username_trigger}\n              {/* <UserProfileMenu isUsername={true}></UserProfileMenu> */}\n              <span className=\"chat-message-time\">{time}</span>\n            </div>\n          )}\n          <p className=\"chat-message\">\n            {/* {this.props.message} */}\n            <span\n              dangerouslySetInnerHTML={{ __html: this.props.message }}\n            ></span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n","/home/slechani/chat_app/frontend/src/index.js",["185","186"],"import '../node_modules/semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/slechani/chat_app/frontend/src/Pages/Login.js",["187","188"],"/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js",["189","190","191","192","193","194"],"import React, { Component } from 'react'\nimport Message from './Message';\nimport { Grid, Divider } from 'semantic-ui-react';\nimport jquery from 'jquery';\nimport DateSeparator from './DateSeparator';\nimport dateFormat from 'dateformat';\n\nexport default class MessageDisplay extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    state = {\n        deltaY: 0,\n        maxDelta: 0,\n    }\n\n \n    componentDidUpdate () {\n        // this.scrollToBottom();\n    }\n\n    // Scroll to bottom of chat\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView();\n      }\n      \n\n    scrollHandler = event => {\n        this.setState(state => {\n            let newDeltaY = state.deltaY + event.deltaY;\n\n            newDeltaY = Math.max(0, newDeltaY);\n            newDeltaY = Math.min(this.state.maxDelta, newDeltaY);\n\n            return {\n                deltaY: newDeltaY\n            };\n        });\n    };\n\n    getDateToDisplay = (date) => {\n        if (date){\n        let yesterday = new Date();\n        yesterday.setDate(new Date().getDate() - 1)\n        if (new Date().toDateString() === date.toDateString())\n            return (\"Today\")\n        else if (date.toLocaleDateString() == yesterday.toLocaleDateString())\n            return (\"Yesterday\")    \n        else     \n            return dateFormat(date, \"mmmm dS yyyy\")\n        }\n        return (\"error\")\n    }\n\n\n    render() {\n        /* Checking if current message username is the same as the previous one, changing display\n           of message depending on it like on the official Slack. */\n        var old_username = \"jdajzdjzajdjadjajd\"\n        var old_date = \"djzakdjad\"\n        let messages = this.props.messages.map((data, idx) => {\n            var showUsername = false\n            var showDate = false\n            var local_date_str = this.getDateToDisplay(new Date(data.sent_date))\n            // var current_date = this.getDateToDisplay(new Date(data.sender_date))\n            // alert(\"current  : \" + current_date + \" / OLD => \" + old_date)\n            if (local_date_str != old_date)\n                showDate = true\n            old_date = local_date_str    \n            var current_username = this.props.messages[idx].sender_name\n            if (current_username != old_username)\n                showUsername = true\n            old_username = current_username  \n           \n                        // let date = local_date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})\n            // alert(JSON.stringify(data))\n            return (\n                \n                <div className=\"\">\n                     { showDate === true ?  <DateSeparator date={local_date_str}></DateSeparator>\n                    : null}\n                    <Message refreshChannels={this.props.refreshChannels} profile_id={data.sender_id} showUsername={showUsername} date={data.sent_date} username={data.sender_name} message={data.content}></Message>\n               \n                   \n                </div>\n            )\n        })\n        return (\n            <Grid.Row className=\"message-display-container\">\n                <div className=\"\">\n                    {messages}\n\n                    {/* Blank div to make scroll to bottom easy */}\n                    <div style={{ float: \"left\", clear: \"both\" }}\n                        ref={(el) => { this.messagesEnd = el; }}>\n                    </div>\n                </div>\n\n            </Grid.Row>\n        )\n    }\n}\n",["195","196"],"/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js",["197","198"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class AddChannelModal extends Component {\n\n    state = {\n        open: false,\n        channel_name: \"\",\n        channel_desc: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    createChannel = () => {\n        const req_body = {\n            name: this.state.channel_name,\n            description: this.state.channel_desc,\n            channel_member: [localStorage.getItem(\"user_id\")],\n            channel_admin: [localStorage.getItem(\"user_id\")],\n            star_channels: [],    \n        }\n\n       Axios.post(configData.SERVER_URL + \"channels/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_name, channel_desc} = this.state \n        return (\n\n\n            <Modal className=\"create-channel-modal\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                trigger={<List.Content className=\"channel-title-menu\">Add Channels</List.Content>}\n            >\n                <Modal.Header className=\"create-chan-header\">Create a Channel</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Modal.Description className=\"modal-desc\">\n                        <p className=\"secondary-text\">\n                            Channels are where your team communicates. They’re best when organized around a topic — #marketing, for example.\n                    </p>\n                    </Modal.Description>\n\n                    <Form class=\"\">\n                        <Form.Field required>\n                        <Form.Input\n                                placeholder='#channel_name'\n                                name='channel_name'\n                                label=\"Name\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                        <Form.Input\n                                placeholder=\"What's this channel about ?\"\n                                name='channel_desc'\n                                label=\"Description (Optional)\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Grid>\n                                <Grid.Row columns=\"16\">\n                                    <Grid.Column width=\"13\">\n                                        <Modal.Header className=\"bold\">\n                                            Make private\n                                    </Modal.Header>\n                                        <Modal.Description>\n                                            <p className=\"secondary-text\">\n                                            When a channel is set to private, it can only be viewed or joined by invitation.\n                                            </p>\n                                 </Modal.Description>\n\n                                    </Grid.Column>\n                                    <Grid.Column verticalAlign=\"middle\" width=\"3\">\n                                        <Checkbox  toggle />\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n                        </Form.Field>\n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.createChannel}>\n                    Create Channel\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js",["199","200","201","202"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Divider } from 'semantic-ui-react';\nimport WorkspaceName from './WorkspaceName';\nimport { VscFiles } from 'react-icons/vsc';\nimport { BsBookmark } from 'react-icons/bs';\nimport ChannelsMenu from './ChannelsMenu';\nimport { FaPlus, FaPlusSquare } from 'react-icons/fa';\nimport MessagesMenu from './MessagesMenu';\nimport Chat from './Chat';\n\nexport default class WorkspaceMenu extends Component {\n\n    state = {\n        refreshChat: false,\n    }\n\n    changeState = (name, value) => {\n        this.setState({[name]:value})\n    }\n\n    render() {\n        if (this.state.refreshChat === true){\n            this.setState({refreshChat: false})\n            this.props.changeState(\"refreshChat\", true)\n        }\n        \n        return (\n            <GridColumn className=\"workspace-menu\" width={2}>\n                <Grid className=\"text-not-selectable\">\n                    <GridRow className=\"workspace-main-row\">\n                        <GridColumn className=\"nopadding-nomargin\"  >\n                            <WorkspaceName title=\"Your Workspace\"></WorkspaceName>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Drafts */}\n                    <GridRow  id=\"drafts-row\" columns=\"16\" className=\"workspace-submenu-row side-menu-item no-padding\" >\n                        <GridColumn className=\"no-padding icon-col\" width=\"1\" >\n                            <VscFiles></VscFiles>\n                        </GridColumn>\n                        <GridColumn className=\"nopadding-nomargin\" width=\"14\">\n                            <span className=\"bold workspace-menu-text\">Drafts</span>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Saved Items */}\n                    <GridRow columns=\"16\" className=\"workspace-submenu-row side-menu-item\" >\n                        <GridColumn className=\" no-padding icon-col\" width=\"1\" >\n                            <BsBookmark></BsBookmark>\n                        </GridColumn>\n                        <GridColumn className=\"nopadding-nomargin\" width=\"14\">\n                            <span className=\"bold workspace-menu-text\">Saved items</span>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Starred Channels list */}\n                    <ChannelsMenu title=\"Starred channels\" starChannels={true} channels={this.props.starredChannels} refreshChannels={this.props.refreshChannels}  changeState={this.changeState} ></ChannelsMenu>\n                    \n                    {/* Standard Channels list */}\n                    <ChannelsMenu title=\"Channels\" starChannels={false} channels={this.props.channels} starredChannels={this.props.starredChannels} refreshChannels={this.props.refreshChannels}  changeState={this.changeState} ></ChannelsMenu>\n                    <MessagesMenu channels={this.props.userChats} refreshChannels={this.props.refreshChannels}  changeState={this.changeState}></MessagesMenu>\n                    {/* <ChannelsMenu title=\"Direct messages\" channels={this.props.userChats}></ChannelsMenu> */}\n                   \n                </Grid>\n                <GridColumn width={14}> \n            </GridColumn>\n            </GridColumn>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js",["203","204","205","206","207","208","209","210","211"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon, } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaPlus } from 'react-icons/fa';\nimport { Redirect } from \"react-router-dom\";\nimport AddChannelModal from './AddChannelModal.js';\nimport UnreadMessagesNotif from './UnreadMessagesNotif.js';\n// import { ModalExampleModal } from \"../Components/AddChannelModal\";\n\n\n\nexport default class ChannelsMenu extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    state = {\n        activeIndex: 0,\n        hover: false,\n        // channels: [],\n        channels: this.props.channels,\n        profile_id: null,\n        redirect: false,\n        channel_to_load: null,\n        display_channels: false,\n        active_channel: -1,\n        };\n\n    loadChannel = (channel_id) => {\n        const url = \"/workspace/\" + channel_id\n        this.setState({ redirect: true })\n        this.setState({ channel_to_load: url })\n    }\n\n    getActiveChannel = () => {\n        let url = window.location.pathname\n        url = url.split('/')[2]\n        return (parseInt(url))\n    }\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({ hover: mouse_status })\n\n    }\n\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        let display_channels = false\n        const { activeIndex } = this.state\n        const channels = this.props.channels.map((data, idx) => {\n            const unread_messages = data.user_read_count - data.message_count \n            var active_channel = false\n            if (data.id === this.getActiveChannel()) {\n                active_channel = true\n                \n                if (this.state.active_channel != data.id){ \n                    this.setState({active_channel: data.id})\n                    // alert(\"active \" + data.id)\n                }\n            }\n            // Display channel if rendering fav list OR Display if rendering regular channels and channel isn't in fav list  \n            if (this.props.starChannels === true || (this.props.starChannels === false && this.props.starredChannels.find(function (el) { return el.id === data.id }) == undefined)) {\n                return (\n  \n                    <List.Item onClick={() => { this.loadChannel(data.id) }} className={`workspace-submenu-row-item ${active_channel ? \"active-item\" : \"\"}`} >\n                        <List.Icon > <FaHashtag></FaHashtag></List.Icon>\n                        <List.Content className=\"channel-title-menu\">\n                            {data.name} \n                            { unread_messages < 0 && active_channel === false &&\n                            <UnreadMessagesNotif unreadMessages={unread_messages}></UnreadMessagesNotif>\n                            }\n                            </List.Content>\n                    </List.Item>\n                )\n            }\n            else\n                return\n        })\n\n\n\n        if (this.state.redirect === true) {\n            this.setState({ redirect: false })\n            this.setState({ channel_to_load: null })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={this.state.channel_to_load} />\n        }\n        if (this.props.channels.length > 0 || this.props.starChannels === false)\n            display_channels = true\n\n        return (\n\n\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                {display_channels ?\n                    <GridColumn className=\"no-padding\" width=\"16\">\n                        <Accordion>\n                            <Accordion.Title onMouseEnter={() => { this.handleHover(true) }} onMouseLeave={() => { this.handleHover(false) }} className=\"workspace-submenu-row\"\n                                active={activeIndex === 0}\n                                index={0}\n                                onClick={this.handleClick}\n                            >\n                                <Icon color=\"white\" name=\"dropdown\"></Icon>\n                                <span className=\"white bold\">{this.props.title}</span>\n                                {/* Add Channel hover icon */}\n                                {this.state.hover === true && this.props.starChannels != true &&\n                                    <span className=\"menu-side-icon-container\">\n                                        <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                                    </span>\n                                }\n                            </Accordion.Title>\n                            <Accordion.Content active={activeIndex === 0}>\n                                <List className=\"collapsible-menu-list\">\n\n                                    {channels}\n                                    {this.props.starChannels != true &&\n                                        <List.Item className=\"workspace-submenu-row-item\">\n                                            <List.Icon >       <FaPlusSquare ></FaPlusSquare></List.Icon>\n\n                                            {/* Add channels */}\n\n                                            <AddChannelModal refreshChannels={this.props.refreshChannels}></AddChannelModal>\n\n\n                                        </List.Item>\n                                    }\n                                </List>\n                            </Accordion.Content>\n                        </Accordion>\n                    </GridColumn> :\n                    <span></span>\n                }\n            </GridRow>\n\n\n        )\n    }\n}\n",["212","213"],"/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js",["214","215"],"import React, { Component } from 'react'\nimport { Menu, Popup, Segment, Icon } from 'semantic-ui-react'\nimport { VscInfo } from 'react-icons/vsc';\nimport Axios from 'axios';\nimport configData from \"../config.json\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default class ChannelMenu extends Component {\n\n    state = {\n        open: false,\n        redirect: false,\n        new_channel: 0,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    pickNewChannelToLoad = () => {\n        let new_channel_id = this.props.channels[0][\"id\"];\n        if (new_channel_id === this.props.channelId)\n            new_channel_id = this.props.channels[1][\"id\"]\n        return (new_channel_id)\n    }\n\n    removeUserFromList = (list) => {\n        let user_list = list\n        const user_id = parseInt(localStorage.getItem(\"user_id\"))\n        const index = user_list.indexOf(user_id)\n        if (index > -1) {\n            user_list.splice(index, 1)\n            return (user_list)\n        }\n    }\n\n    leaveChannel = () => {\n\n        if (this.props.isUserChat === false){\n        const req_data = {\n            channel_member: this.removeUserFromList(this.props.channelMembers)\n        }\n        this.setOpen(false);\n        Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_data)\n            .then((res) => {\n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n        Axios.post(configData.SERVER_URL + \"starChannel/\", { profile_id: localStorage.getItem(\"user_id\"), channel_id: this.props.channelId })\n            .then((result) => {\n                this.props.refreshChannels()\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n        }\n        else{\n            this.setOpen(false);\n            Axios.post(configData.SERVER_URL + \"leaveChat/\", {profile_id: localStorage.getItem(\"user_id\"), channel_id: this.props.channelId})\n            .then((res) => {\n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n                this.props.refreshChannels()\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n        }\n    }\n\n    deleteChannel = () => {\n        this.setOpen(false);\n        Axios.delete(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\")\n            .then((res) => {\n                this.props.refreshChannels()\n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n    }\n\n    render() {\n\n        if (this.state.redirect === true) {\n            let channel_url = \"/workspace/\" + this.state.new_channel;\n            this.setState({ redirect: false })\n            this.setState({ new_channel: 0 })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={channel_url} />\n        }\n        return (\n\n            <Popup id=\"header-menu-popup\"\n                trigger={<button className=\"unstyled\" id=\"chat-info-btn\" >\n                    <VscInfo size=\"2em\"></VscInfo>\n                </button>}\n                basic\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                position='bottom right'\n                content={<Menu className=\"menu-popup\"\n                    onItemClick={() => this.setOpen(false)}\n                    // secondary\n                    vertical\n                >\n                    <Menu.Item onClick={this.leaveChannel}>\n                        Leave channel\n                    <Icon name=\"log out\"></Icon>\n                    </Menu.Item>\n                    {this.props.isUserChat == false &&\n                        <Menu.Item onClick={this.deleteChannel}>\n                            Delete channel\n                    <Icon name=\"delete\"></Icon>\n                        </Menu.Item>\n                    }\n\n                </Menu>\n\n                }\n                on='click'\n            >\n\n\n            </Popup>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/UserListModal.js",["216","217"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Image, Search } from 'semantic-ui-react';\nimport AddUsersModal from './AddUsersModal';\n\n\nexport default class UserListModal extends Component {\n    state = {\n        open: false,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    reload = () => {\n        this.props.reload()\n        this.setOpen(false)\n\n    }\n\n    render() {\n        let users = this.props && this.props.usersList.length > 0 ? \n        this.props.usersList.map((user, index) => {                   \n                return (\n                    <List.Item>\n                        <Image className=\"user-list-picture\"  src='https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48' />\n                        <List.Content>\n                           <List.Header> <p className=\"user-list-name-container\">\n                            <span className=\"user-list-name\">{user.username}</span>\n                            </p>\n                            </List.Header>\n                        </List.Content>\n                    </List.Item>\n                ) \n            }) : <span></span>\n        \n        return (\n            <Modal \n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"tiny\"\n                trigger={<button className=\"unstyled user-count-channel-btn\">\n                    <div class=\"double-button-half-left\">\n                        <img id=\"profile-img-chat\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-24\"></img>\n                    </div>\n                    <div className=\"double-button-half-right user-count-channel\">\n                        <div className=\"double-button-count\">\n                            {this.props.userList.length}\n                        </div>\n                    </div></button>}\n            >\n                <Modal.Header className=\"create-chan-header\">{this.props.userList.length} members in #{this.props.channelName}</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <button className=\"unstyled add-people-modal-btn\">\n              \n                    <AddUsersModal addPeople={true} channelId={this.props.channelId} reload={this.reload}  channelName={this.props.channelName}></AddUsersModal>\n                       \n                    </button>\n                    <List selection verticalAlign='middle' className=\"user-list\">\n                        {users}\n                    </List>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Back\n          </Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n",["218","219"],"/home/slechani/chat_app/frontend/src/App.js",["220","221"],"import logo from './logo.svg';\nimport './App.css';\nimport '../node_modules/semantic-ui-css/semantic.min.css'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Login from './Pages/Login'; \nimport Register from './Pages/Register';\nimport Workspace from './Pages/Workspace';\nfunction App() {\n    return (\n        <main>\n            <Switch>\n                <Route path=\"/register\" component={Register} />\n                <Route path=\"/login\" component={Login} />\n                <Route path=\"/workspace\" component={Workspace} />\n            </Switch>\n        </main>\n    )\n}\n\nexport default App;\n","/home/slechani/chat_app/frontend/src/Components/ChatHeader.js",["222","223","224"],"import React, { Component } from \"react\";\nimport { Grid, Divider, Image, Button, Icon, Popup } from \"semantic-ui-react\";\nimport { BsStar } from \"react-icons/bs\";\nimport \"../../node_modules/semantic-ui-css/semantic.min.css\";\nimport ChannelMenu from \"./ChannelMenu\";\nimport ChangeTopic from \"./ChangeTopic\";\nimport UserListModal from \"./UserListModal\";\nimport Axios from \"axios\";\nimport configData from \"../config.json\";\nimport AddUsersModal from \"./AddUsersModal\";\n\nexport default class ChatHeader extends Component {\n  state = {\n    users_list: {},\n    channel_name: \"\",\n  };\n\n  componentWillMount() {\n    this.getUserList();\n  }\n\n\n\n  getUserList = () => {\n    Axios.post(configData.SERVER_URL + \"getChannelMembers/\", {\n      channel_id: this.props.channelId\n    }).then(res => {\n      this.setState({ users_list: res.data });\n    });\n  };\n\n\n  starChannel = () => {\n    const req_body = {\n      profile_id: localStorage.getItem(\"user_id\"),\n      channel_id: this.props.channelId\n    };\n\n    Axios.post(configData.SERVER_URL + \"starChannel/\", req_body)\n      .then(res => {\n        this.props.refreshChannels();\n        this.props.refreshMessages();\n        this.props.checkStarredChannel();\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    let topic = this.props.channelTopic;\n\n    if (topic === \" \") topic = \"Add a topic\";\n    return (\n      <Grid.Row columns=\"16\" className=\"chat-header\">\n        {this.props.isUserChat === false ? (\n          <React.Fragment>\n            {/* Classic channel header display   */}\n            <Grid.Column width=\"8\" className=\"center-vertical\">\n              <Button id=\"channel-title-chat\" className=\"unstyled text-btn\">\n                #{this.props.channelName}\n              </Button>\n              <Button\n                id=\"star-channel-btn\"\n                onClick={this.starChannel}\n                className=\"unstyled text-btn\"\n              >\n                {this.props.channelStarred ? (\n                  <Icon name=\"star\" color=\"yellow\"></Icon>\n                ) : (\n                  <Icon name=\"star\" className=\"not-fav-star\"></Icon>\n                )}\n              </Button>\n              <div>\n                <ChangeTopic\n                  channelId={this.props.channelId}\n                  refreshChannels={this.props.refreshMessages}\n                  topic={topic}\n                ></ChangeTopic>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\" className=\"center-vertical\">\n              <div id=\"chat-header-menu-container\">\n                <UserListModal\n                  usersList={this.state.users_list}\n                  channelId={this.props.channelId}\n                  reload={this.props.refreshMessages}\n                  channelName={this.props.channelName}\n                  userList={this.props.channelMembers}\n                />\n                <AddUsersModal\n                  addPeople={false}\n                  channelId={this.props.channelId}\n                  reload={this.props.refreshMessages}\n                  channelName={this.props.channelName}\n                ></AddUsersModal>\n\n                <ChannelMenu\n                  isUserChat={this.props.isUserChat}\n                  channelMembers={this.props.channelMembers}\n                  changeState={this.props.changeState}\n                  refreshMessages={this.props.refreshMessages}\n                  channels={this.props.channels}\n                  refreshChannels={this.props.refreshChannels}\n                  channelId={this.props.channelId}\n                ></ChannelMenu>\n              </div>\n            </Grid.Column>\n          </React.Fragment>\n        ) : (\n          <React.Fragment>\n            {/* Chat header display for USER CHATS */}\n            <Grid.Column width=\"8\" className=\"center-vertical\">\n              <Button\n                id=\"channel-title-user-chat\"\n                className=\"unstyled text-btn\"\n              >\n                #{this.props.user_chat_name}\n              </Button>\n            </Grid.Column>\n            <Grid.Column width=\"8\" className=\"center-vertical\">\n              <div id=\"chat-header-menu-container\">\n                <ChannelMenu\n                  isUserChat={this.props.isUserChat}\n                  channelMembers={this.props.channelMembers}\n                  changeState={this.props.changeState}\n                  refreshMessages={this.props.refreshMessages}\n                  channels={this.props.channels}\n                  refreshChannels={this.props.refreshChannels}\n                  channelId={this.props.channelId}\n                ></ChannelMenu>\n              </div>\n            </Grid.Column>\n          </React.Fragment>\n        )}\n        <Divider className=\"divider-horizontal\" horizontal></Divider>\n      </Grid.Row>\n    );\n  }\n}\n","/home/slechani/chat_app/frontend/src/Components/DateSeparator.js",["225","226","227"],"import React, { Component } from 'react'\nimport { Divider } from 'semantic-ui-react';\nimport classNames from \"classnames\"\n\nexport default class DateSeparator extends Component {\n    render() {\n        let wrapper_classes = classNames(\n            'date-separator-wrapper',\n            {\n                'yesterday-date': this.props.date === \"Yesterday\",\n                'today-date': this.props.date === \"Today\",\n                'other-date': this.props.date != \"Yesterday\" && this.props.date != \"Today\",\n            }\n        );\n        return (\n            <div className=\"date-separator-container\">\n         \n                    <div className=\"divider-date-separator\"></div>\n                    <div className={wrapper_classes}>\n                        <span className=\"date-separator-date\">{this.props.date}</span>\n                    </div>\n                \n            </div>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Pages/Workspace.js",[],"/home/slechani/chat_app/frontend/src/Components/AddUsersModal.js",["228","229","230"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Image, Search } from 'semantic-ui-react';\nimport { FaPlus } from 'react-icons/fa';\nimport AddUserSearchbar from './AddUserSearchbar';\n\nexport default class AddUsersModal extends Component {\n    state = {\n        open: false,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    // Closes modal and reload interface after having added a user\n    reload = () => {\n        this.setOpen(false)\n        this.props.reload();\n    }\n\n    render() {\n              \n        return (\n            <Modal \n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"tiny\"\n                trigger={ this.props.addPeople === true ?  <span className=\"btn-link-txt\">Add people</span> : <button className=\"unstyled\" id=\"chat-add-btn\">\n                <FaPlus id=\"chat-add-icon\" size=\"0.7em\"></FaPlus>\n                <span id=\"chat-add-text\">Add</span>\n            </button>}\n            >\n                <Modal.Header className=\"create-chan-header\">Add people</Modal.Header>\n                <Modal.Description className=\"channel-add-desc\">#{this.props.channelName}</Modal.Description>\n                <Modal.Content className=\"create-chan-content\">\n                <AddUserSearchbar  reload={this.reload} channelId={this.props.channelId}></AddUserSearchbar>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Back\n          </Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/WorkspaceName.js",["231","232","233","234"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Icon, Button } from 'semantic-ui-react';\nimport { FaChevronDown, FaPenSquare } from 'react-icons/fa';\nimport { BsPencilSquare } from 'react-icons/bs'\n\n\nexport default class WorkspaceName extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <Grid verticalAlign='middle' className=\"workspace-name-grid\" >\n                <GridRow  className=\"nopadding-nomargin\" columns=\"16\">\n                    <GridColumn className=\"nopadding-nomargin\" width=\"12\" >\n                        <div className=\"bold workspace-name \">{this.props.title} <FaChevronDown size=\"0.75em\"></FaChevronDown></div>\n                    </GridColumn>\n                    <GridColumn width=\"4\" >\n\n\n                        {/* <Button circular className=\"new-message-btn\"> */}\n                        <Icon id=\"write-messsage-icon\" circular color=\"black\"  size=\"em\" name=\"pencil square\"></Icon>\n                            {/* <BsPencilSquare color=\"#3F0E40\" size=\"1.10em\"></BsPencilSquare> */}\n                        {/* </Button> */}\n\n                    </GridColumn>\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/AddUserSearchbar.js",["235","236","237"],"import _ from 'lodash'\nimport React from 'react'\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react'\nimport Axios from 'axios';\nimport configData from \"../config.json\";\n\nconst initialState = {\n  loading: false,\n  results: [],\n  value: '',\n}\n\nvar source = []\n\nfunction getNonSubscribedUsers(channel_id){\n    Axios.post(configData.SERVER_URL + \"getNonChannelMembers/\", {channel_id: channel_id})\n         .then((res) => {\n            source = res.data\n         })\n         .catch((err) => {\n             console.log(err)\n         })\n}\n\nfunction addUserToChannel(user_id, channel_id, reload){\n    Axios.post(configData.SERVER_URL + \"addUserToChannel/\", {channel_id: channel_id, profile_id: user_id})\n    .then((res) => {\n      reload();\n    })\n    .catch((err) => {\n        console.log(err)\n    })\n}\n\nfunction exampleReducer(state, action) {\n  switch (action.type) {\n    case 'CLEAN_QUERY':\n      return initialState\n    case 'START_SEARCH':\n      return { ...state, loading: true, value: action.query }\n    case 'FINISH_SEARCH':\n      return { ...state, loading: false, results: action.results }\n    case 'UPDATE_SELECTION':\n      return { ...state, value: action.selection }\n\n    default:\n      throw new Error()\n  }\n}\n\nfunction AddUserSearchbar(props) {\n    getNonSubscribedUsers(props.channelId)\n    const renderer = ({username, user_id }) => (\n        <div className=\"searchbar-add-users-results\">               \n            <p className=\"searchbar-add-users-results\" onClick={() =>{addUserToChannel(user_id, props.channelId, props.reload)} }>{username}</p>               \n        </div>\n    );\n\n\n    // var source = getNonSubscribedUsers(props.channelId)\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState)\n  const { loading, results, value } = state\n\n  const timeoutRef = React.useRef()\n  const handleSearchChange = React.useCallback((e, data) => {\n    clearTimeout(timeoutRef.current)\n    dispatch({ type: 'START_SEARCH', query: data.value })\n\n    timeoutRef.current = setTimeout(() => {\n      if (data.value.length === 0) {\n        dispatch({ type: 'CLEAN_QUERY' })\n        return\n      }\n\n      const re = new RegExp(_.escapeRegExp(data.value), 'i')\n      const isMatch = (result) => re.test(result.username)\n\n      dispatch({\n        type: 'FINISH_SEARCH',\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }, [])\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current)\n    }\n  }, [])\n//   alert(JSON.stringify(results))\n  return (\n\n        <Search\n          loading={loading}\n          onResultSelect={(e, data) =>\n            dispatch({ type: 'UPDATE_SELECTION', selection: data.result.username })\n          }\n          onSearchChange={handleSearchChange}\n          results={results}\n          resultRenderer={renderer}\n          value={value}\n          className=\"searchbar-add-users\"\n        />\n  )\n}\n\nexport default AddUserSearchbar\n","/home/slechani/chat_app/frontend/src/Components/SendMessageModal.js",["238"],"/home/slechani/chat_app/frontend/src/Components/DirectMessageSearchbar.js",["239","240","241"],"import _ from 'lodash'\nimport React from 'react'\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react'\nimport Axios from 'axios';\nimport configData from \"../config.json\";\n\nconst initialState = {\n  loading: false,\n  results: [],\n  value: '',\n}\n\nvar source = []\n\nfunction getAllUsers(){\n    Axios.get(configData.SERVER_URL + \"getUsers/\")\n         .then((res) => {\n            source = res.data\n         })\n         .catch((err) => {\n             console.log(err)\n         })\n}\n\nfunction addUserToChannel(user_id, reload){\n    Axios.post(configData.SERVER_URL + \"startChat/\", {emitter_profile_id: localStorage.getItem(\"user_id\"), receiver_profile_id: user_id})\n    .then((res) => {\n      reload();\n    })\n    .catch((err) => {\n        console.log(err)\n    })\n}\n\nfunction exampleReducer(state, action) {\n  switch (action.type) {\n    case 'CLEAN_QUERY':\n      return initialState\n    case 'START_SEARCH':\n      return { ...state, loading: true, value: action.query }\n    case 'FINISH_SEARCH':\n      return { ...state, loading: false, results: action.results }\n    case 'UPDATE_SELECTION':\n      return { ...state, value: action.selection }\n\n    default:\n      throw new Error()\n  }\n}\n\nfunction DirectMessageSearchbar(props) {\n    getAllUsers()\n    const renderer = ({username, user_id }) => (\n        <div className=\"searchbar-add-users-results\">               \n            <p className=\"searchbar-add-users-results\" onClick={() =>{addUserToChannel(user_id, props.reload)} }>{username}</p>               \n        </div>\n    );\n\n\n    // var source = getNonSubscribedUsers(props.channelId)\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState)\n  const { loading, results, value } = state\n\n  const timeoutRef = React.useRef()\n  const handleSearchChange = React.useCallback((e, data) => {\n    clearTimeout(timeoutRef.current)\n    dispatch({ type: 'START_SEARCH', query: data.value })\n\n    timeoutRef.current = setTimeout(() => {\n      if (data.value.length === 0) {\n        dispatch({ type: 'CLEAN_QUERY' })\n        return\n      }\n\n      const re = new RegExp(_.escapeRegExp(data.value), 'i')\n      const isMatch = (result) => re.test(result.username)\n\n      dispatch({\n        type: 'FINISH_SEARCH',\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }, [])\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current)\n    }\n  }, [])\n//   alert(JSON.stringify(results))\n  return (\n\n        <Search\n          loading={loading}\n          onResultSelect={(e, data) =>\n            dispatch({ type: 'UPDATE_SELECTION', selection: data.result.username })\n          }\n          onSearchChange={handleSearchChange}\n          results={results}\n          resultRenderer={renderer}\n          value={value}\n          \n          className=\"searchbar-add-users\"\n        />\n  )\n}\n\nexport default DirectMessageSearchbar\n","/home/slechani/chat_app/frontend/src/Components/UserProfileMenu.js",["242"],"import React, { Component } from 'react'\nimport { Menu, Popup, Icon } from 'semantic-ui-react'\nimport { Redirect } from \"react-router-dom\";\n\nexport default class UserProfileMenu extends Component {\n\n    state = {\n        open: false,\n        redirect: false,\n        new_channel: 0,\n    }\n\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    signOut = () => {\n        localStorage.clear();\n        this.setState({ redirect: true })\n    }\n\n    editProfile = () => {\n\n    }\n\n\n    render() {\n        if (this.state.redirect === true) {\n            this.setState({ redirect: false })\n            return (\n\n                <Redirect to=\"/login\"></Redirect>\n            )\n        }\n        return (\n            <Popup id=\"header-menu-popup\"\n                trigger={\n                    <button className=\"unstyled profile-img-btn\">\n                        <img id=\"profile-img\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48\"></img>\n                    </button>\n                }\n                basic\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                position='bottom right'\n                content={<Menu className=\"menu-popup\"\n                    onItemClick={() => this.setOpen(false)}              \n                    vertical\n                >\n\n                    <Menu.Item onClick={this.signOut}>\n                        Sign out\n                    <Icon name=\"log out\"></Icon>\n                    </Menu.Item>\n\n\n                </Menu>\n\n                }\n                on='click'\n            >\n\n\n            </Popup>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/EditProfileModal.js",["243"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid, Menu, Icon } from 'semantic-ui-react';\n\nexport default class EditProfileModal extends Component {\n\n    state = {\n        open: false\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n\n    render() {\n        return (\n            <Modal className=\"create-channel-modal\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                trigger={                <Menu.Item onClick={this.editProfile}>\n                Edit profile\n            <Icon name=\"edit\"></Icon>\n            </Menu.Item>}\n            >\n                <Modal.Header className=\"create-chan-header\">Create a Channel</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Modal.Description className=\"modal-desc\">\n                        <p className=\"secondary-text\">\n                            Channels are where your team communicates. They’re best when organized around a topic — #marketing, for example.\n                    </p>\n                    </Modal.Description>\n\n                    <Form class=\"\">\n                        <Form.Field required>\n                        <Form.Input\n                                placeholder='#channel_name'\n                                name='channel_name'\n                                label=\"Name\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                        <Form.Input\n                                placeholder=\"What's this channel about ?\"\n                                name='channel_desc'\n                                label=\"Description (Optional)\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Grid>\n                                <Grid.Row columns=\"16\">\n                                    <Grid.Column width=\"13\">\n                                        <Modal.Header className=\"bold\">\n                                            Make private\n                                    </Modal.Header>\n                                        <Modal.Description>\n                                            <p className=\"secondary-text\">\n                                            When a channel is set to private, it can only be viewed or joined by invitation.\n                                            </p>\n                                 </Modal.Description>\n\n                                    </Grid.Column>\n                                    <Grid.Column verticalAlign=\"middle\" width=\"3\">\n                                        <Checkbox  toggle />\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n                        </Form.Field>\n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.createChannel}>\n                    Create Channel\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/UserProfilePopup.js",["244","245","246","247","248","249","250","251","252","253","254"],"import React, { Component } from \"react\";\nimport { Menu, Popup, Segment, Icon, Button } from \"semantic-ui-react\";\nimport { VscInfo } from \"react-icons/vsc\";\nimport Axios from \"axios\";\nimport configData from \"../config.json\";\nimport { Redirect } from \"react-router-dom\";\nimport EditProfileModal from \"./EditProfileModal.js\";\n\nexport default class UserProfilePopup extends Component {\n  state = {\n    open: false,\n    redirect: false,\n    new_channel: 0\n  };\n\n  setOpen = open => {\n    this.setState({ open: open });\n  };\n\n  addUserToChannel = () => {\n    Axios.post(configData.SERVER_URL + \"startChat/\", {emitter_profile_id: localStorage.getItem(\"user_id\"), receiver_profile_id: this.props.profile_id})\n    .then((res) => {\n        this.props.refreshChannels()  \n    })\n    .catch((err) => {\n        console.log(err)\n    })\n}\n\n\n\n  render() {\n\n    const popup_size = this.props.username != localStorage.getItem(\"username\") ? \"small-user-popup\" : \"big-user-popup\";\n    var trigger = (\n      <button className=\"unstyled profile-img-btn\">\n        <img\n          id=\"profile-img\"\n          src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48\"\n        ></img>\n      </button>\n    );\n    // let trigger = (\n    //     this.props.isUsername ?   <span className=\"chat-message-username\">\n    //         {/* {this.props.username} */}fzafza\n    //      </span>\n    //             :\n    //             this.props.trigger\n\n    return (\n      <Popup\n        flowing\n        hoverable\n        id=\"header-menu-popup\"\n        //     trigger={ this.props.isUsername ?   <span className=\"chat-message-username\">\n        //     {/* {this.props.username} */}fzafza\n        //  </span>\n        //         :\n        //         this.props.trigger}\n        trigger={trigger}\n        offset={[50, 0]}\n        onClose={() => this.setOpen(false)}\n        onOpen={() => this.setOpen(true)}\n        basic\n        position=\"right center\"\n        content={\n          <div className={`profile-popup-container ${popup_size}`}\n            className=\"profile-popup-container\">\n            <div className=\"profile-popup-img-container\">\n              <img\n                className=\"profile-popup-img\"\n                src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-512\"\n              ></img>\n            </div>\n            <div className=\"profile-popup-options-container\">\n              <div>\n                <span className=\"popup-username\">{this.props.username}</span>\n              </div>\n\n              {this.props.username != localStorage.getItem(\"username\") &&\n              <div className=\"popup-send-msg-container\">\n                <Button onClick={this.addUserToChannel}  color=\"blue\" className=\"popup-send-msg-btn\">Send Message</Button>\n              </div>\n              }\n            </div>\n          </div>\n        }\n        on=\"hover\"\n      ></Popup>\n    );\n  }\n}\n","/home/slechani/chat_app/frontend/src/Components/UnreadMessagesNotif.js",["255"],"import React, { Component } from 'react'\n\nexport default class UnreadMessagesNotif extends Component {\n\n    constructor(props){\n        super(props)\n    }\n\n    render() {\n        return (\n            <span className=\"unread-messages-container\">\n                <span className=\"unread-messages-txt\">\n                    {Math.abs(this.props.unreadMessages)}\n                </span>\n            </span>\n        )\n    }\n}\n",{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":3,"column":3,"nodeType":"262","messageId":"263","endLine":3,"endColumn":9},{"ruleId":"260","severity":1,"message":"264","line":4,"column":3,"nodeType":"262","messageId":"263","endLine":4,"endColumn":12},{"ruleId":"260","severity":1,"message":"265","line":6,"column":3,"nodeType":"262","messageId":"263","endLine":6,"endColumn":10},{"ruleId":"260","severity":1,"message":"266","line":7,"column":3,"nodeType":"262","messageId":"263","endLine":7,"endColumn":13},{"ruleId":"260","severity":1,"message":"267","line":54,"column":7,"nodeType":"262","messageId":"263","endLine":54,"endColumn":24},{"ruleId":"260","severity":1,"message":"268","line":55,"column":7,"nodeType":"262","messageId":"263","endLine":55,"endColumn":24},{"ruleId":"260","severity":1,"message":"265","line":2,"column":16,"nodeType":"262","messageId":"263","endLine":2,"endColumn":23},{"ruleId":"260","severity":1,"message":"269","line":2,"column":37,"nodeType":"262","messageId":"263","endLine":2,"endColumn":44},{"ruleId":"260","severity":1,"message":"270","line":2,"column":46,"nodeType":"262","messageId":"263","endLine":2,"endColumn":51},{"ruleId":"271","severity":1,"message":"272","line":33,"column":38,"nodeType":"273","messageId":"274","endLine":33,"endColumn":40},{"ruleId":"260","severity":1,"message":"275","line":84,"column":13,"nodeType":"262","messageId":"263","endLine":84,"endColumn":21},{"ruleId":"260","severity":1,"message":"270","line":4,"column":16,"nodeType":"262","messageId":"263","endLine":4,"endColumn":21},{"ruleId":"260","severity":1,"message":"265","line":4,"column":23,"nodeType":"262","messageId":"263","endLine":4,"endColumn":30},{"ruleId":"260","severity":1,"message":"264","line":4,"column":32,"nodeType":"262","messageId":"263","endLine":4,"endColumn":41},{"ruleId":"260","severity":1,"message":"276","line":4,"column":43,"nodeType":"262","messageId":"263","endLine":4,"endColumn":51},{"ruleId":"260","severity":1,"message":"261","line":4,"column":53,"nodeType":"262","messageId":"263","endLine":4,"endColumn":59},{"ruleId":"260","severity":1,"message":"277","line":4,"column":61,"nodeType":"262","messageId":"263","endLine":4,"endColumn":72},{"ruleId":"260","severity":1,"message":"278","line":8,"column":21,"nodeType":"262","messageId":"263","endLine":8,"endColumn":26},{"ruleId":"279","severity":1,"message":"280","line":28,"column":5,"nodeType":"281","messageId":"282","endLine":30,"endColumn":6},{"ruleId":"279","severity":1,"message":"280","line":55,"column":5,"nodeType":"281","messageId":"282","endLine":58,"endColumn":6},{"ruleId":"271","severity":1,"message":"283","line":72,"column":23,"nodeType":"273","messageId":"274","endLine":72,"endColumn":25},{"ruleId":"260","severity":1,"message":"284","line":114,"column":16,"nodeType":"262","messageId":"263","endLine":114,"endColumn":21},{"ruleId":"260","severity":1,"message":"285","line":114,"column":23,"nodeType":"262","messageId":"263","endLine":114,"endColumn":31},{"ruleId":"260","severity":1,"message":"286","line":115,"column":15,"nodeType":"262","messageId":"263","endLine":115,"endColumn":27},{"ruleId":"256","replacedBy":"287"},{"ruleId":"258","replacedBy":"288"},{"ruleId":"260","severity":1,"message":"289","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":14},{"ruleId":"260","severity":1,"message":"290","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":23},{"ruleId":"260","severity":1,"message":"291","line":3,"column":36,"nodeType":"262","messageId":"263","endLine":3,"endColumn":48},{"ruleId":"260","severity":1,"message":"292","line":3,"column":50,"nodeType":"262","messageId":"263","endLine":3,"endColumn":56},{"ruleId":"260","severity":1,"message":"293","line":3,"column":58,"nodeType":"262","messageId":"263","endLine":3,"endColumn":67},{"ruleId":"271","severity":1,"message":"272","line":32,"column":26,"nodeType":"273","messageId":"274","endLine":32,"endColumn":28},{"ruleId":"260","severity":1,"message":"294","line":2,"column":17,"nodeType":"262","messageId":"263","endLine":2,"endColumn":21},{"ruleId":"260","severity":1,"message":"295","line":2,"column":37,"nodeType":"262","messageId":"263","endLine":2,"endColumn":45},{"ruleId":"260","severity":1,"message":"289","line":2,"column":47,"nodeType":"262","messageId":"263","endLine":2,"endColumn":51},{"ruleId":"260","severity":1,"message":"296","line":37,"column":17,"nodeType":"262","messageId":"263","endLine":37,"endColumn":30},{"ruleId":"256","replacedBy":"297"},{"ruleId":"258","replacedBy":"298"},{"ruleId":"260","severity":1,"message":"289","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":14},{"ruleId":"260","severity":1,"message":"299","line":3,"column":8,"nodeType":"262","messageId":"263","endLine":3,"endColumn":23},{"ruleId":"279","severity":1,"message":"280","line":7,"column":3,"nodeType":"281","messageId":"282","endLine":9,"endColumn":4},{"ruleId":"260","severity":1,"message":"300","line":8,"column":25,"nodeType":"262","messageId":"263","endLine":8,"endColumn":30},{"ruleId":"260","severity":1,"message":"301","line":8,"column":32,"nodeType":"262","messageId":"263","endLine":8,"endColumn":38},{"ruleId":"260","severity":1,"message":"267","line":36,"column":37,"nodeType":"262","messageId":"263","endLine":36,"endColumn":54},{"ruleId":"260","severity":1,"message":"268","line":36,"column":56,"nodeType":"262","messageId":"263","endLine":36,"endColumn":73},{"ruleId":"260","severity":1,"message":"269","line":3,"column":16,"nodeType":"262","messageId":"263","endLine":3,"endColumn":23},{"ruleId":"260","severity":1,"message":"302","line":4,"column":8,"nodeType":"262","messageId":"263","endLine":4,"endColumn":14},{"ruleId":"279","severity":1,"message":"280","line":9,"column":5,"nodeType":"281","messageId":"282","endLine":12,"endColumn":6},{"ruleId":"271","severity":1,"message":"283","line":49,"column":44,"nodeType":"273","messageId":"274","endLine":49,"endColumn":46},{"ruleId":"271","severity":1,"message":"272","line":69,"column":32,"nodeType":"273","messageId":"274","endLine":69,"endColumn":34},{"ruleId":"271","severity":1,"message":"272","line":73,"column":34,"nodeType":"273","messageId":"274","endLine":73,"endColumn":36},{"ruleId":"256","replacedBy":"303"},{"ruleId":"258","replacedBy":"304"},{"ruleId":"260","severity":1,"message":"305","line":42,"column":17,"nodeType":"262","messageId":"263","endLine":42,"endColumn":29},{"ruleId":"260","severity":1,"message":"306","line":42,"column":31,"nodeType":"262","messageId":"263","endLine":42,"endColumn":43},{"ruleId":"260","severity":1,"message":"269","line":2,"column":37,"nodeType":"262","messageId":"263","endLine":2,"endColumn":44},{"ruleId":"260","severity":1,"message":"307","line":7,"column":10,"nodeType":"262","messageId":"263","endLine":7,"endColumn":16},{"ruleId":"260","severity":1,"message":"291","line":7,"column":18,"nodeType":"262","messageId":"263","endLine":7,"endColumn":30},{"ruleId":"260","severity":1,"message":"308","line":9,"column":8,"nodeType":"262","messageId":"263","endLine":9,"endColumn":12},{"ruleId":"260","severity":1,"message":"289","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":14},{"ruleId":"260","severity":1,"message":"290","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":23},{"ruleId":"279","severity":1,"message":"280","line":13,"column":5,"nodeType":"281","messageId":"282","endLine":15,"endColumn":6},{"ruleId":"271","severity":1,"message":"272","line":42,"column":26,"nodeType":"273","messageId":"274","endLine":42,"endColumn":28},{"ruleId":"271","severity":1,"message":"272","line":64,"column":47,"nodeType":"273","messageId":"274","endLine":64,"endColumn":49},{"ruleId":"271","severity":1,"message":"283","line":70,"column":167,"nodeType":"273","messageId":"274","endLine":70,"endColumn":169},{"ruleId":"309","severity":1,"message":"310","line":85,"column":17,"nodeType":"311","messageId":"312","endLine":85,"endColumn":23},{"ruleId":"271","severity":1,"message":"272","line":114,"column":87,"nodeType":"273","messageId":"274","endLine":114,"endColumn":89},{"ruleId":"271","severity":1,"message":"272","line":124,"column":62,"nodeType":"273","messageId":"274","endLine":124,"endColumn":64},{"ruleId":"256","replacedBy":"313"},{"ruleId":"258","replacedBy":"314"},{"ruleId":"260","severity":1,"message":"315","line":2,"column":23,"nodeType":"262","messageId":"263","endLine":2,"endColumn":30},{"ruleId":"271","severity":1,"message":"283","line":116,"column":44,"nodeType":"273","messageId":"274","endLine":116,"endColumn":46},{"ruleId":"260","severity":1,"message":"316","line":2,"column":38,"nodeType":"262","messageId":"263","endLine":2,"endColumn":44},{"ruleId":"317","severity":1,"message":"318","line":45,"column":25,"nodeType":"319","endLine":45,"endColumn":124},{"ruleId":"256","replacedBy":"320"},{"ruleId":"258","replacedBy":"321"},{"ruleId":"260","severity":1,"message":"322","line":1,"column":8,"nodeType":"262","messageId":"263","endLine":1,"endColumn":12},{"ruleId":"260","severity":1,"message":"323","line":4,"column":10,"nodeType":"262","messageId":"263","endLine":4,"endColumn":23},{"ruleId":"260","severity":1,"message":"324","line":2,"column":25,"nodeType":"262","messageId":"263","endLine":2,"endColumn":30},{"ruleId":"260","severity":1,"message":"325","line":2,"column":46,"nodeType":"262","messageId":"263","endLine":2,"endColumn":51},{"ruleId":"260","severity":1,"message":"326","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":16},{"ruleId":"260","severity":1,"message":"269","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":17},{"ruleId":"271","severity":1,"message":"272","line":12,"column":47,"nodeType":"273","messageId":"274","endLine":12,"endColumn":49},{"ruleId":"271","severity":1,"message":"272","line":12,"column":81,"nodeType":"273","messageId":"274","endLine":12,"endColumn":83},{"ruleId":"260","severity":1,"message":"294","line":2,"column":17,"nodeType":"262","messageId":"263","endLine":2,"endColumn":21},{"ruleId":"260","severity":1,"message":"324","line":2,"column":31,"nodeType":"262","messageId":"263","endLine":2,"endColumn":36},{"ruleId":"260","severity":1,"message":"316","line":2,"column":38,"nodeType":"262","messageId":"263","endLine":2,"endColumn":44},{"ruleId":"260","severity":1,"message":"261","line":2,"column":43,"nodeType":"262","messageId":"263","endLine":2,"endColumn":49},{"ruleId":"260","severity":1,"message":"327","line":3,"column":25,"nodeType":"262","messageId":"263","endLine":3,"endColumn":36},{"ruleId":"260","severity":1,"message":"328","line":4,"column":10,"nodeType":"262","messageId":"263","endLine":4,"endColumn":24},{"ruleId":"279","severity":1,"message":"280","line":8,"column":5,"nodeType":"281","messageId":"282","endLine":10,"endColumn":6},{"ruleId":"260","severity":1,"message":"289","line":3,"column":18,"nodeType":"262","messageId":"263","endLine":3,"endColumn":22},{"ruleId":"260","severity":1,"message":"329","line":3,"column":24,"nodeType":"262","messageId":"263","endLine":3,"endColumn":30},{"ruleId":"260","severity":1,"message":"315","line":3,"column":32,"nodeType":"262","messageId":"263","endLine":3,"endColumn":39},{"ruleId":"260","severity":1,"message":"330","line":4,"column":8,"nodeType":"262","messageId":"263","endLine":4,"endColumn":24},{"ruleId":"260","severity":1,"message":"289","line":3,"column":18,"nodeType":"262","messageId":"263","endLine":3,"endColumn":22},{"ruleId":"260","severity":1,"message":"329","line":3,"column":24,"nodeType":"262","messageId":"263","endLine":3,"endColumn":30},{"ruleId":"260","severity":1,"message":"315","line":3,"column":32,"nodeType":"262","messageId":"263","endLine":3,"endColumn":39},{"ruleId":"317","severity":1,"message":"318","line":40,"column":25,"nodeType":"319","endLine":40,"endColumn":119},{"ruleId":"260","severity":1,"message":"294","line":2,"column":17,"nodeType":"262","messageId":"263","endLine":2,"endColumn":21},{"ruleId":"260","severity":1,"message":"331","line":2,"column":10,"nodeType":"262","messageId":"263","endLine":2,"endColumn":14},{"ruleId":"260","severity":1,"message":"315","line":2,"column":23,"nodeType":"262","messageId":"263","endLine":2,"endColumn":30},{"ruleId":"260","severity":1,"message":"332","line":2,"column":32,"nodeType":"262","messageId":"263","endLine":2,"endColumn":36},{"ruleId":"260","severity":1,"message":"333","line":3,"column":10,"nodeType":"262","messageId":"263","endLine":3,"endColumn":17},{"ruleId":"260","severity":1,"message":"334","line":6,"column":10,"nodeType":"262","messageId":"263","endLine":6,"endColumn":18},{"ruleId":"260","severity":1,"message":"335","line":7,"column":8,"nodeType":"262","messageId":"263","endLine":7,"endColumn":24},{"ruleId":"271","severity":1,"message":"272","line":34,"column":44,"nodeType":"273","messageId":"274","endLine":34,"endColumn":46},{"ruleId":"317","severity":1,"message":"318","line":37,"column":9,"nodeType":"319","endLine":40,"endColumn":10},{"ruleId":"336","severity":1,"message":"337","line":68,"column":13,"nodeType":"338","endLine":68,"endColumn":48},{"ruleId":"317","severity":1,"message":"318","line":70,"column":15,"nodeType":"319","endLine":73,"endColumn":16},{"ruleId":"271","severity":1,"message":"272","line":80,"column":36,"nodeType":"273","messageId":"274","endLine":80,"endColumn":38},{"ruleId":"279","severity":1,"message":"280","line":5,"column":5,"nodeType":"281","messageId":"282","endLine":7,"endColumn":6},"no-native-reassign",["339"],"no-negated-in-lhs",["340"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'GridRow' is defined but never used.","'GridColumn' is defined but never used.","'submittedUsername' is assigned a value but never used.","'submittedPassword' is assigned a value but never used.","'Divider' is defined but never used.","'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'messages' is assigned a value but never used.","'TextArea' is defined but never used.","'ButtonGroup' is defined but never used.","'Quill' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '===' and instead saw '=='.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'quillToolbar' is assigned a value but never used.",["339"],["340"],"'Grid' is defined but never used.","'FaChevronDown' is defined but never used.","'FaPlusSquare' is defined but never used.","'FaUser' is defined but never used.","'FaUserAlt' is defined but never used.","'List' is defined but never used.","'Checkbox' is defined but never used.","'channel_topic' is assigned a value but never used.",["339"],["340"],"'UserProfileMenu' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'jquery' is defined but never used.",["339"],["340"],"'channel_name' is assigned a value but never used.","'channel_desc' is assigned a value but never used.","'FaPlus' is defined but never used.","'Chat' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue",["339"],["340"],"'Segment' is defined but never used.","'Search' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["339"],["340"],"'logo' is defined but never used.","'BrowserRouter' is defined but never used.","'Image' is defined but never used.","'Popup' is defined but never used.","'BsStar' is defined but never used.","'FaPenSquare' is defined but never used.","'BsPencilSquare' is defined but never used.","'Header' is defined but never used.","'AddUserSearchbar' is defined but never used.","'Menu' is defined but never used.","'Icon' is defined but never used.","'VscInfo' is defined but never used.","'Redirect' is defined but never used.","'EditProfileModal' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation"]