[{"/home/slechani/chat_app/frontend/src/Pages/Workspace.js":"1","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js":"2","/home/slechani/chat_app/frontend/src/Components/Chat.js":"3","/home/slechani/chat_app/frontend/src/Components/ChatHeader.js":"4","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js":"5","/home/slechani/chat_app/frontend/src/index.js":"6","/home/slechani/chat_app/frontend/src/Pages/Login.js":"7","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js":"8","/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js":"9","/home/slechani/chat_app/frontend/src/Components/Message.js":"10","/home/slechani/chat_app/frontend/src/reportWebVitals.js":"11","/home/slechani/chat_app/frontend/src/Pages/Register.js":"12","/home/slechani/chat_app/frontend/src/Components/WorkspaceName.js":"13","/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js":"14","/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js":"15","/home/slechani/chat_app/frontend/src/Components/UserListModal.js":"16","/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js":"17","/home/slechani/chat_app/frontend/src/Components/Chatbox.js":"18"},{"size":2320,"mtime":1609003175513,"results":"19","hashOfConfig":"20"},{"size":5167,"mtime":1610773582275,"results":"21","hashOfConfig":"20"},{"size":3769,"mtime":1610775601715,"results":"22","hashOfConfig":"20"},{"size":3833,"mtime":1610764542661,"results":"23","hashOfConfig":"20"},{"size":3782,"mtime":1610764892491,"results":"24","hashOfConfig":"20"},{"size":628,"mtime":1608439606892,"results":"25","hashOfConfig":"20"},{"size":2230,"mtime":1607971620643,"results":"26","hashOfConfig":"20"},{"size":3089,"mtime":1610770706217,"results":"27","hashOfConfig":"20"},{"size":3918,"mtime":1610769970260,"results":"28","hashOfConfig":"20"},{"size":1597,"mtime":1608661523969,"results":"29","hashOfConfig":"20"},{"size":362,"mtime":1607523001563,"results":"30","hashOfConfig":"20"},{"size":2275,"mtime":1607971464348,"results":"31","hashOfConfig":"20"},{"size":1241,"mtime":1608746465054,"results":"32","hashOfConfig":"20"},{"size":4324,"mtime":1610770283313,"results":"33","hashOfConfig":"20"},{"size":2350,"mtime":1608910683121,"results":"34","hashOfConfig":"20"},{"size":2596,"mtime":1608922314486,"results":"35","hashOfConfig":"20"},{"size":2623,"mtime":1608659956762,"results":"36","hashOfConfig":"20"},{"size":3879,"mtime":1610775556526,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"nhe71c",{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/slechani/chat_app/frontend/src/Pages/Workspace.js",[],["90","91"],"/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js",["92","93","94","95","96","97","98","99"],"/home/slechani/chat_app/frontend/src/Components/Chat.js",["100","101","102","103"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Divider, Input } from 'semantic-ui-react';\nimport configData from \"../config.json\";\nimport axios from 'axios';\nimport ChatHeader from './ChatHeader.js';\nimport MessageDisplay from './MessageDisplay.js';\n// import Chatbox from './Chatbox.js';\nimport {Chatbox} from './Chatbox.js';\n\nexport default class Chat extends Component {\n\n    state = {\n        messages: [],\n        refresh: false,\n        channel_name: \"\",\n        topic: \"\",\n        channel_members: [],\n        channelId: 0,\n        channel_is_starred: false,\n    };\n\n\n    componentDidMount() {\n        this.getMessages();\n        \n    }\n\n    checkStarredChannel = (current_id) => {\n        // alert(JSON.stringify(this.props.starredChannels))\n        // for (const id in this.props.starredChannels) {\n        //     if (this.props.starredChannels.hasOwnProperty(id)) {\n        //         if (this.props.starredChannels[id][\"id\"] === parseInt(current_id)) {\n        //             this.setState({ channel_is_starred: true })\n        //             return\n        //         }\n        //     }\n        // }\n    }\n\n    getMessages = () => {\n        let url = window.location.pathname\n        url = url.split('/')[2]\n        this.setState({ channelId: parseInt(url) })\n        // this.checkStarredChannel(url)\n        // if (this.props.starredChannels.includes(parseInt(url)))\n            // this.setState({ channel_is_starred: true })\n        url = configData.SERVER_URL + \"channels/\" + url + \"/\"\n        axios.get(url)\n            .then((result) => {\n                this.setState({ channel_name: result.data.name })\n                this.setState({ channel_members: result.data.channel_member })\n                this.setState({ messages: result.data.message_set })\n                this.setState({ topic: result.data.topic })\n                this.setState({ refresh: false })\n                if (result.data.star_channels.includes(parseInt(localStorage.getItem(\"user_item\"))) \n                || parseInt(result.data.star_channels) === parseInt(localStorage.getItem(\"user_id\"))){\n                    this.setState({channel_is_starred: true})\n                }\n                else\n                    this.setState({channel_is_starred: false})\n            })\n            .catch((error) => { console.log(error) })\n    }\n\n\n    render() {\n        if (this.props.refreshChat === true) {\n            this.getMessages();\n            this.props.changeState(\"refreshChat\", false)\n        }\n\n        let messages = this.state.messages.map((data, idx) => {\n            return (\n                <div>\n                    <span>User#{data.sender} : {data.content}</span>\n                </div>\n            )\n        })\n\n        return (\n            <GridColumn className=\"workspace-chat\" width={14} onClick={this.getMessages}>\n                <Grid className=\"chat-grid\">\n                    <ChatHeader checkStarredChannel={this.props.checkStarredChannel} channelStarred={this.state.channel_is_starred} channelTopic={this.state.topic} channels={this.props.channels} refreshChannels={this.props.refreshChannels} channelId={this.state.channelId} refreshMessages={this.getMessages} channelName={this.state.channel_name} changeState={this.props.changeState} channelMembers={this.state.channel_members}>\n\n                    </ChatHeader>\n                    <div>\n                    </div>\n                    <Grid.Row className=\"chat-messages-container\">\n                        <MessageDisplay messages={this.state.messages}>\n                        </MessageDisplay>\n                    </Grid.Row>\n\n                    <Chatbox refreshMessages={this.getMessages}></Chatbox>\n\n                </Grid>\n\n            </GridColumn>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChatHeader.js",["104","105","106","107","108"],"import React, { Component } from 'react'\nimport { Grid, Divider, Image, Button, Icon, Popup } from 'semantic-ui-react';\nimport { FaPause, FaPlus } from 'react-icons/fa';\nimport { BsStar } from 'react-icons/bs';\nimport '../../node_modules/semantic-ui-css/semantic.min.css';\nimport { VscInfo } from 'react-icons/vsc';\nimport ChannelMenu from './ChannelMenu';\nimport ChangeTopic from './ChangeTopic';\nimport UserListModal from './UserListModal';\nimport Axios from 'axios';\nimport configData from \"../config.json\";\n\n\nexport default class ChatHeader extends Component {\n\n    state = {\n        users_list: {},\n    }\n\n    componentWillMount () {\n        this.getUserList();\n        \n    }\n\n    getUserList = () => {\n        Axios.post(configData.SERVER_URL + \"getChannelMembers/\", { channel_id: 22 })\n            .then((res) => {\n                this.setState({ users_list: res.data })\n            })\n    }\n\n    starChannel = () => {\n        const req_body = {\n            profile_id: localStorage.getItem(\"user_id\"),\n            channel_id: this.props.channelId,\n        }\n\n\n        Axios.post(configData.SERVER_URL + \"starChannel/\", req_body)\n             .then((res) => {\n                this.props.refreshChannels()\n                this.props.refreshMessages()\n                this.props.checkStarredChannel()\n             })\n             .catch((err) =>{\n                 console.log(err)\n             })\n    }\n\n\n    render() {\n        let topic = this.props.channelTopic\n        if (topic === \" \")\n            topic = \"Add a topic\"\n        return (\n            <Grid.Row columns=\"16\" className=\"chat-header\">\n                <Grid.Column width=\"8\" className=\"center-vertical\">\n                    <Button id=\"channel-title-chat\" className=\"unstyled text-btn\">\n                        #{this.props.channelName}\n                    </Button>\n                    <Button id=\"star-channel-btn\" onClick={this.starChannel} className=\"unstyled text-btn\">\n                        {this.props.channelStarred  ?\n                        <Icon name=\"star\" color=\"yellow\"></Icon>\n                        :\n                        <Icon name=\"star\" className=\"not-fav-star\"></Icon>                            \n                    }\n                    </Button>\n                    <div>\n                        <ChangeTopic channelId={this.props.channelId} refreshChannels={this.props.refreshMessages} topic={topic}></ChangeTopic>\n                    </div>\n\n                </Grid.Column>\n                <Grid.Column width=\"8\" className=\"center-vertical\">\n                    <div id=\"chat-header-menu-container\">\n\n                        {/* <div className=\"double-button-half-right user-count-channel\"> */}\n                        <UserListModal usersList={this.state.users_list} channelName={this.props.channelName} userList={this.props.channelMembers} />\n                        {/* </div> */}\n                        {/* </button> */}\n                        {/* <Button id=\"chat-add-btn\">\n                        <FaPlus id=\"chat-add-icon\" size=\"0.7em\"></FaPlus>\n                           <span>Add</span>\n    </Button> */}\n\n                        <button className=\"unstyled\" id=\"chat-add-btn\">\n                            <FaPlus id=\"chat-add-icon\" size=\"0.7em\"></FaPlus>\n                            <span id=\"chat-add-text\">Add</span>\n                        </button>\n                        <ChannelMenu channelMembers={this.props.channelMembers} changeState={this.props.changeState} refreshMessages={this.props.refreshMessages} channels={this.props.channels} refreshChannels={this.props.refreshChannels} channelId={this.props.channelId}></ChannelMenu>\n                    </div>\n                </Grid.Column>\n                <Divider className=\"divider-horizontal\" horizontal></Divider>\n            </Grid.Row >\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js",["109"],"import React, { Component } from 'react'\nimport { Menu, Popup, Segment, Icon } from 'semantic-ui-react'\nimport { VscInfo } from 'react-icons/vsc';\nimport Axios from 'axios';\nimport configData from \"../config.json\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default class ChannelMenu extends Component {\n\n    state = {\n        open: false,\n        redirect: false,\n        new_channel: 0,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    pickNewChannelToLoad = () => {\n        let new_channel_id = this.props.channels[0][\"id\"];\n        if (new_channel_id === this.props.channelId)\n            new_channel_id = this.props.channels[1][\"id\"]\n        return (new_channel_id)\n    }\n\n    removeUserFromList = (list) => {\n        let user_list = list\n        const user_id = parseInt(localStorage.getItem(\"user_id\"))\n        const index = user_list.indexOf(user_id)\n        if (index > -1){\n            user_list.splice(index, 1)\n            return (user_list)\n        }\n    }\n    \n    leaveChannel = () => {\n       \n        const req_data = {\n            channel_member: this.removeUserFromList(this.props.channelMembers)\n        }\n        this.setOpen(false);\n        Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_data)\n            .then((res) => {            \n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n        Axios.post(configData.SERVER_URL + \"starChannel/\", {profile_id: localStorage.getItem(\"user_id\"), channel_id:this.props.channelId})\n            .then((result) => {\n                this.props.refreshChannels()\n             })    \n            .catch((err) => {\n                console.log(err)\n            })  \n    }\n\n    deleteChannel = () => {\n        this.setOpen(false);\n        Axios.delete(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\")\n            .then((res) => {\n                this.props.refreshChannels()\n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n    }\n\n    render() {\n\n        if (this.state.redirect === true) {\n            let channel_url = \"/workspace/\" + this.state.new_channel;\n            this.setState({ redirect: false })\n            this.setState({ new_channel: 0 })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={channel_url} />\n        }\n        return (\n\n            <Popup id=\"header-menu-popup\"\n                trigger={<button className=\"unstyled\" id=\"chat-info-btn\" >\n                    <VscInfo size=\"2em\"></VscInfo>\n                </button>}\n                basic\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                position='bottom right'\n                content={<Menu className=\"menu-popup\"\n                    onItemClick={() => this.setOpen(false)}\n                    // secondary\n                    vertical\n                >\n                    <Menu.Item onClick={this.leaveChannel}>\n                        Leave channel\n                    <Icon name=\"log out\"></Icon>\n                    </Menu.Item>\n                    <Menu.Item onClick={this.deleteChannel}>\n                        Delete channel\n                    <Icon name=\"delete\"></Icon>\n                    </Menu.Item>\n\n                </Menu>\n\n                }\n                on='click'\n            >\n\n\n            </Popup>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/index.js",["110","111"],"import '../node_modules/semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["112","113"],"/home/slechani/chat_app/frontend/src/Pages/Login.js",["114","115","116","117"],"import React, { Component } from 'react'\nimport { Button, Grid, GridRow, GridColumn, Form } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport configData from  \"../config.json\";\n\nexport default class Register extends Component {\n\n    state = { username: '', password: '', submittedUsername: '', submittedPassword: '', redirect: false,}\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n        const { username, password } = this.state\n\n        this.setState({ submittedUsername: username, submittedPassword: password })\n        this.loginAccount(username, password)        \n    }\n\n    loginAccount = (username, password) => {\n        axios.post(configData.SERVER_URL + \"token/\", {username:username, password:password})\n        .then(res => {\n            localStorage.setItem(\"username\", username)\n            this.setState({redirect:true})\n        })\n        .catch(error => {\n            alert(\"Error : \" + error)\n        })\n    }\n\n    render() {\n        if (this.state.redirect === true){\n            return <Redirect to=\"/workspace\" />\n        }\n        const { username, password, submittedUsername, submittedPassword } = this.state \n        return (\n            <Grid verticalAlign=\"middle\" columns={4} >\n                <GridRow verticalAlign=\"middle\" centered>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Input\n                                placeholder='Username'\n                                name='username'\n                                value={username}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Input\n                                placeholder='Password'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button content='Login' />\n                        </Form.Group>\n                    </Form>\n\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js",["118","119","120","121"],"/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js",["122","123","124","125","126"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaUser, FaUserAlt, FaPlus } from 'react-icons/fa';\nexport default class MessagesMenu extends Component {\n    state = {\n        activeIndex: 0,\n        hover: false,\n    };\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({hover: mouse_status})\n    }\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        const { activeIndex } = this.state\n        return (\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                <GridColumn className=\"no-padding\" width=\"16\">\n                    <Accordion>\n                        <Accordion.Title  onMouseEnter={() => {this.handleHover(true)}} onMouseLeave={() => {this.handleHover(false)}} className=\"workspace-submenu-row\"\n                            active={activeIndex === 0}\n                            index={0}\n                            onClick={this.handleClick}\n                           \n                        >\n                                <Icon className=\"white\" color=\"white\" name=\"dropdown\"></Icon>\n                            <span className=\"bold white\">Direct messages</span>\n\n                            {/* Start chat hover icon */}\n                            { this.state.hover === true &&\n                            <span className=\"menu-side-icon-container\">\n                                <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                            </span>\n                            }\n                        </Accordion.Title>\n                        <Accordion.Content active={activeIndex === 0}>\n                            <List className=\"collapsible-menu-list\">\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>admin</span>\n                                        <span>you</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>John</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>Jane</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaPlusSquare></FaPlusSquare></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        Send direct message\n                                    </List.Content>\n                                </List.Item>\n\n                            </List>\n                        </Accordion.Content>\n                    </Accordion>\n                </GridColumn>\n            </GridRow>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/Message.js",["127","128","129"],"import React, { Component } from 'react'\nimport { Grid } from 'semantic-ui-react';\n\nexport default class Message extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n\n    }\n\n\n    render() {\n        let local_date = new Date(this.props.date) \n        let time = local_date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})\n\n        return (\n\n            <div className=\"message-row\">\n\n                <div className=\"message-left-col\">\n                    {this.props.showUsername === false &&\n                        <span className=\"chat-message-side-time\">{time}</span>\n                    }\n                    {this.props.showUsername === true &&\n                        <img id=\"profile-img-chat-message\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48\"></img>\n\n                    }\n                </div>\n                <div className=\"message-right-col\">\n\n                    {this.props.showUsername === true &&\n                        <div className=\"chat-message-header\">\n                            <span className=\"chat-message-username\">\n                                {this.props.username}\n                            </span>\n                            <span className=\"chat-message-time\">\n                                {time} \n                        </span>\n                        </div>\n                    }\n                    <p className=\"chat-message\">\n                        {this.props.message}\n                    </p>\n                </div>\n            </div>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/reportWebVitals.js",[],"/home/slechani/chat_app/frontend/src/Pages/Register.js",["130","131","132","133"],"/home/slechani/chat_app/frontend/src/Components/WorkspaceName.js",["134","135","136","137"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Icon, Button } from 'semantic-ui-react';\nimport { FaChevronDown, FaPenSquare } from 'react-icons/fa';\nimport { BsPencilSquare } from 'react-icons/bs'\n\n\nexport default class WorkspaceName extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <Grid verticalAlign='middle' className=\"workspace-name-grid\" >\n                <GridRow  className=\"nopadding-nomargin\" columns=\"16\">\n                    <GridColumn className=\"nopadding-nomargin\" width=\"12\" >\n                        <div className=\"bold workspace-name \">{this.props.title} <FaChevronDown size=\"0.75em\"></FaChevronDown></div>\n                    </GridColumn>\n                    <GridColumn width=\"4\" >\n\n\n                        {/* <Button circular className=\"new-message-btn\"> */}\n                        <Icon id=\"write-messsage-icon\" circular color=\"black\"  size=\"em\" name=\"pencil square\"></Icon>\n                            {/* <BsPencilSquare color=\"#3F0E40\" size=\"1.10em\"></BsPencilSquare> */}\n                        {/* </Button> */}\n\n                    </GridColumn>\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n",["138","139"],"/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js",["140","141"],"/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js",["142","143","144","145"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class ChangeTopic extends Component {\n  \n    state = {\n        open: false,\n        channel_topic: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    setTopic = () => {\n        const req_body = {\n            topic: this.state.channel_topic,            \n        }\n\n       Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_topic} = this.state \n        return (\n            <Modal className=\"\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"mini\"\n                trigger={<Button id=\"chat-channel-topic\" className=\"unstyled\">{this.props.topic}</Button>}\n            >\n                <Modal.Header className=\"create-chan-header\">Edit channel topic</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Form class=\"\">\n                        <Form.Field required>\n                        \n                        <Form.Input\n                                placeholder='Channel topic'\n                                name='channel_topic'\n                                label=\"Channel topic\"\n                                onChange={this.handleChange}                             \n                            />\n                        </Form.Field>\n                       \n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.setTopic}>\n                    Set Topic\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n",["146","147"],"/home/slechani/chat_app/frontend/src/Components/UserListModal.js",["148","149"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Image, Search } from 'semantic-ui-react';\n\n\nexport default class UserListModal extends Component {\n    state = {\n        open: false,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    render() {\n        let users = this.props && this.props.usersList.length > 0 ? \n        this.props.usersList.map((user, index) => {                   \n                return (\n                    <List.Item>\n                        <Image className=\"user-list-picture\"  src='https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48' />\n                        <List.Content>\n                           <List.Header> <p className=\"user-list-name-container\">\n                            <span className=\"user-list-name\">{user.username}</span>\n                            </p>\n                            </List.Header>\n                        </List.Content>\n                    </List.Item>\n                ) \n            }) : <span></span>\n        \n        return (\n            <Modal \n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"tiny\"\n                trigger={<button className=\"unstyled user-count-channel-btn\">\n                    <div class=\"double-button-half-left\">\n                        <img id=\"profile-img-chat\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-24\"></img>\n                    </div>\n                    <div className=\"double-button-half-right user-count-channel\">\n                        <div className=\"double-button-count\">\n                            {this.props.userList.length}\n                        </div>\n                    </div></button>}\n            >\n                <Modal.Header className=\"create-chan-header\">{this.props.userList.length} members in #{this.props.channelName}</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <button className=\"unstyled add-people-modal-btn\">\n                    <span className=\"btn-link-txt\">Add people</span>\n                    </button>\n                    <List selection verticalAlign='middle' className=\"user-list\">\n                        {users}\n                    </List>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Back\n          </Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js",["150","151"],"import React, { Component } from 'react'\nimport Message from './Message';\nimport { Grid } from 'semantic-ui-react';\nimport jquery from 'jquery';\n\nexport default class MessageDisplay extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    state = {\n        deltaY: 0,\n        maxDelta: 0,\n    }\n\n    componentDidMount() {\n        // IE, Chrome, Safari, Opera\n        window.addEventListener(\"wheel\", this.scrollHandler);\n\n        // Firefox\n        window.addEventListener(\"DOMMouseScroll\", this.scrollHandler);\n\n        const maxDelta = jquery(\".container-content\").height() - window.innerHeight;\n\n        this.setState({\n            maxDelta\n        });\n\n        jquery(\".container-content.left\").css(\n            \"transform\",\n            `translateY(-${jquery(\".container-content\").height()}px)`\n        );\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate () {\n        this.scrollToBottom();\n    }\n\n    // Scroll to bottom of chat\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n      }\n      \n\n    scrollHandler = event => {\n        this.setState(state => {\n            let newDeltaY = state.deltaY + event.deltaY;\n\n            newDeltaY = Math.max(0, newDeltaY);\n            newDeltaY = Math.min(this.state.maxDelta, newDeltaY);\n\n            return {\n                deltaY: newDeltaY\n            };\n        });\n    };\n\n\n\n    render() {\n        /* Checking if current message username is the same as the previous one, changing display\n           of message depending on it like on the official Slack. */\n        var old_username = \"jdajzdjzajdjadjajd\"\n        let messages = this.props.messages.map((data, idx) => {\n            var showUsername = false\n            var current_username = this.props.messages[idx].sender_name\n            if (current_username != old_username)\n                showUsername = true\n            old_username = current_username\n            return (\n                <div className=\"\">\n                    <Message showUsername={showUsername} date={data.sent_date} username={data.sender_name} message={data.content}></Message>\n                </div>\n            )\n        })\n        return (\n            <Grid.Row className=\"message-display-container\">\n                <div className=\"\">\n                    {messages}\n\n                    {/* Blank div to make scroll to bottom easy */}\n                    <div style={{ float: \"left\", clear: \"both\" }}\n                        ref={(el) => { this.messagesEnd = el; }}>\n                    </div>\n                </div>\n\n            </Grid.Row>\n        )\n    }\n}\n",["152","153"],"/home/slechani/chat_app/frontend/src/Components/Chatbox.js",["154","155"],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"164","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":23},{"ruleId":"165","severity":1,"message":"166","line":12,"column":5,"nodeType":"167","messageId":"168","endLine":14,"endColumn":6},{"ruleId":"169","severity":1,"message":"170","line":39,"column":26,"nodeType":"171","messageId":"172","endLine":39,"endColumn":28},{"ruleId":"169","severity":1,"message":"173","line":61,"column":167,"nodeType":"171","messageId":"172","endLine":61,"endColumn":169},{"ruleId":"174","severity":1,"message":"175","line":73,"column":17,"nodeType":"176","messageId":"177","endLine":73,"endColumn":23},{"ruleId":"169","severity":1,"message":"170","line":102,"column":87,"nodeType":"171","messageId":"172","endLine":102,"endColumn":89},{"ruleId":"169","severity":1,"message":"170","line":112,"column":62,"nodeType":"171","messageId":"172","endLine":112,"endColumn":64},{"ruleId":"160","severity":1,"message":"178","line":2,"column":16,"nodeType":"162","messageId":"163","endLine":2,"endColumn":23},{"ruleId":"160","severity":1,"message":"179","line":2,"column":37,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"160","severity":1,"message":"180","line":2,"column":46,"nodeType":"162","messageId":"163","endLine":2,"endColumn":51},{"ruleId":"160","severity":1,"message":"181","line":72,"column":13,"nodeType":"162","messageId":"163","endLine":72,"endColumn":21},{"ruleId":"160","severity":1,"message":"182","line":2,"column":25,"nodeType":"162","messageId":"163","endLine":2,"endColumn":30},{"ruleId":"160","severity":1,"message":"183","line":2,"column":46,"nodeType":"162","messageId":"163","endLine":2,"endColumn":51},{"ruleId":"160","severity":1,"message":"184","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":17},{"ruleId":"160","severity":1,"message":"185","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":16},{"ruleId":"160","severity":1,"message":"186","line":6,"column":10,"nodeType":"162","messageId":"163","endLine":6,"endColumn":17},{"ruleId":"160","severity":1,"message":"187","line":2,"column":23,"nodeType":"162","messageId":"163","endLine":2,"endColumn":30},{"ruleId":"160","severity":1,"message":"188","line":8,"column":25,"nodeType":"162","messageId":"163","endLine":8,"endColumn":30},{"ruleId":"160","severity":1,"message":"189","line":8,"column":32,"nodeType":"162","messageId":"163","endLine":8,"endColumn":38},{"ruleId":"156","replacedBy":"190"},{"ruleId":"158","replacedBy":"191"},{"ruleId":"160","severity":1,"message":"192","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":16},{"ruleId":"160","severity":1,"message":"193","line":2,"column":33,"nodeType":"162","messageId":"163","endLine":2,"endColumn":43},{"ruleId":"160","severity":1,"message":"194","line":35,"column":37,"nodeType":"162","messageId":"163","endLine":35,"endColumn":54},{"ruleId":"160","severity":1,"message":"195","line":35,"column":56,"nodeType":"162","messageId":"163","endLine":35,"endColumn":73},{"ruleId":"160","severity":1,"message":"179","line":2,"column":37,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"160","severity":1,"message":"196","line":7,"column":10,"nodeType":"162","messageId":"163","endLine":7,"endColumn":16},{"ruleId":"160","severity":1,"message":"197","line":7,"column":18,"nodeType":"162","messageId":"163","endLine":7,"endColumn":30},{"ruleId":"160","severity":1,"message":"198","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":12},{"ruleId":"160","severity":1,"message":"161","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"164","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":23},{"ruleId":"160","severity":1,"message":"199","line":3,"column":25,"nodeType":"162","messageId":"163","endLine":3,"endColumn":34},{"ruleId":"160","severity":1,"message":"200","line":3,"column":50,"nodeType":"162","messageId":"163","endLine":3,"endColumn":56},{"ruleId":"169","severity":1,"message":"170","line":11,"column":26,"nodeType":"171","messageId":"172","endLine":11,"endColumn":28},{"ruleId":"160","severity":1,"message":"161","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"165","severity":1,"message":"166","line":5,"column":5,"nodeType":"167","messageId":"168","endLine":7,"endColumn":6},{"ruleId":"201","severity":1,"message":"202","line":27,"column":25,"nodeType":"203","endLine":27,"endColumn":132},{"ruleId":"160","severity":1,"message":"192","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":16},{"ruleId":"160","severity":1,"message":"193","line":2,"column":33,"nodeType":"162","messageId":"163","endLine":2,"endColumn":43},{"ruleId":"160","severity":1,"message":"194","line":34,"column":37,"nodeType":"162","messageId":"163","endLine":34,"endColumn":54},{"ruleId":"160","severity":1,"message":"195","line":34,"column":56,"nodeType":"162","messageId":"163","endLine":34,"endColumn":73},{"ruleId":"160","severity":1,"message":"192","line":2,"column":43,"nodeType":"162","messageId":"163","endLine":2,"endColumn":49},{"ruleId":"160","severity":1,"message":"204","line":3,"column":25,"nodeType":"162","messageId":"163","endLine":3,"endColumn":36},{"ruleId":"160","severity":1,"message":"205","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":24},{"ruleId":"165","severity":1,"message":"166","line":8,"column":5,"nodeType":"167","messageId":"168","endLine":10,"endColumn":6},{"ruleId":"156","replacedBy":"206"},{"ruleId":"158","replacedBy":"207"},{"ruleId":"160","severity":1,"message":"208","line":43,"column":17,"nodeType":"162","messageId":"163","endLine":43,"endColumn":29},{"ruleId":"160","severity":1,"message":"209","line":43,"column":31,"nodeType":"162","messageId":"163","endLine":43,"endColumn":43},{"ruleId":"160","severity":1,"message":"210","line":2,"column":17,"nodeType":"162","messageId":"163","endLine":2,"endColumn":21},{"ruleId":"160","severity":1,"message":"211","line":2,"column":37,"nodeType":"162","messageId":"163","endLine":2,"endColumn":45},{"ruleId":"160","severity":1,"message":"161","line":2,"column":47,"nodeType":"162","messageId":"163","endLine":2,"endColumn":51},{"ruleId":"160","severity":1,"message":"212","line":37,"column":17,"nodeType":"162","messageId":"163","endLine":37,"endColumn":30},{"ruleId":"156","replacedBy":"213"},{"ruleId":"158","replacedBy":"214"},{"ruleId":"160","severity":1,"message":"215","line":2,"column":38,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"201","severity":1,"message":"202","line":38,"column":25,"nodeType":"203","endLine":38,"endColumn":124},{"ruleId":"165","severity":1,"message":"166","line":7,"column":5,"nodeType":"167","messageId":"168","endLine":10,"endColumn":6},{"ruleId":"169","severity":1,"message":"170","line":69,"column":34,"nodeType":"171","messageId":"172","endLine":69,"endColumn":36},{"ruleId":"156","replacedBy":"216"},{"ruleId":"158","replacedBy":"217"},{"ruleId":"160","severity":1,"message":"218","line":2,"column":17,"nodeType":"162","messageId":"163","endLine":2,"endColumn":26},{"ruleId":"160","severity":1,"message":"219","line":2,"column":28,"nodeType":"162","messageId":"163","endLine":2,"endColumn":37},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'FaChevronDown' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'GridRow' is defined but never used.","'Divider' is defined but never used.","'Input' is defined but never used.","'messages' is assigned a value but never used.","'Image' is defined but never used.","'Popup' is defined but never used.","'FaPause' is defined but never used.","'BsStar' is defined but never used.","'VscInfo' is defined but never used.","'Segment' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.",["220"],["221"],"'Button' is defined but never used.","'GridColumn' is defined but never used.","'submittedUsername' is assigned a value but never used.","'submittedPassword' is assigned a value but never used.","'FaPlus' is defined but never used.","'FaPlusSquare' is defined but never used.","'Chat' is defined but never used.","'FaHashtag' is defined but never used.","'FaUser' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FaPenSquare' is defined but never used.","'BsPencilSquare' is defined but never used.",["220"],["221"],"'channel_name' is assigned a value but never used.","'channel_desc' is assigned a value but never used.","'List' is defined but never used.","'Checkbox' is defined but never used.","'channel_topic' is assigned a value but never used.",["220"],["221"],"'Search' is defined but never used.",["220"],["221"],"'Component' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]