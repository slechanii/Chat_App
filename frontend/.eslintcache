[{"/home/slechani/chat_app/frontend/src/reportWebVitals.js":"1","/home/slechani/chat_app/frontend/src/Pages/Register.js":"2","/home/slechani/chat_app/frontend/src/Components/Chat.js":"3","/home/slechani/chat_app/frontend/src/Components/Chatbox.js":"4","/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js":"5","/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js":"6","/home/slechani/chat_app/frontend/src/Components/Message.js":"7","/home/slechani/chat_app/frontend/src/index.js":"8","/home/slechani/chat_app/frontend/src/Pages/Login.js":"9","/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js":"10","/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js":"11","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js":"12","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js":"13","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js":"14","/home/slechani/chat_app/frontend/src/Components/UserListModal.js":"15","/home/slechani/chat_app/frontend/src/App.js":"16","/home/slechani/chat_app/frontend/src/Components/ChatHeader.js":"17","/home/slechani/chat_app/frontend/src/Components/DateSeparator.js":"18"},{"size":362,"mtime":1607523001563,"results":"19","hashOfConfig":"20"},{"size":2275,"mtime":1607971464348,"results":"21","hashOfConfig":"20"},{"size":3819,"mtime":1610861435301,"results":"22","hashOfConfig":"20"},{"size":6913,"mtime":1610862334604,"results":"23","hashOfConfig":"20"},{"size":3918,"mtime":1610769970260,"results":"24","hashOfConfig":"20"},{"size":2350,"mtime":1608910683121,"results":"25","hashOfConfig":"20"},{"size":1700,"mtime":1610800311243,"results":"26","hashOfConfig":"20"},{"size":628,"mtime":1608439606892,"results":"27","hashOfConfig":"20"},{"size":2230,"mtime":1607971620643,"results":"28","hashOfConfig":"20"},{"size":2729,"mtime":1610863412455,"results":"29","hashOfConfig":"20"},{"size":4324,"mtime":1610770283313,"results":"30","hashOfConfig":"20"},{"size":3089,"mtime":1610770706217,"results":"31","hashOfConfig":"20"},{"size":5167,"mtime":1610773582275,"results":"32","hashOfConfig":"20"},{"size":3782,"mtime":1610764892491,"results":"33","hashOfConfig":"20"},{"size":2596,"mtime":1608922314486,"results":"34","hashOfConfig":"20"},{"size":615,"mtime":1608439575519,"results":"35","hashOfConfig":"20"},{"size":3833,"mtime":1610764542661,"results":"36","hashOfConfig":"20"},{"size":538,"mtime":1610863773836,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nhe71c",{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/slechani/chat_app/frontend/src/reportWebVitals.js",[],"/home/slechani/chat_app/frontend/src/Pages/Register.js",["87","88","89","90"],"import React, { Component } from 'react'\nimport { Button, Grid, GridRow, GridColumn, Form } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport configData from  \"../config.json\";\n\nexport default class Register extends Component {\n\n    state = {\n        username: '', password: '', submittedUsername: '', submittedPassword: '', redirect: false,\n    }\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n        const { username, password } = this.state\n\n        this.setState({ submittedUsername: username, submittedPassword: password })\n        this.registerAccount(username, password)\n    }\n\n    registerAccount = (username, password) => {\n        axios.post(configData.SERVER_URL + \"users/\", { username: username, password: password })\n            .then(res => {\n                localStorage.setItem(\"username\", username)\n                this.setState({redirect:true})\n            })\n            .catch(error => {\n                alert(\"Error : \" + error)\n            })\n    }\n\n    render() {\n        const { username, password, submittedUsername, submittedPassword } = this.state\n        if (this.state.redirect === true){\n            return <Redirect to=\"/workspace\" />\n        }\n        return (\n            <Grid verticalAlign=\"middle\" columns={4} >\n                <GridRow verticalAlign=\"middle\" centered>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Input\n                                placeholder='Username'\n                                name='username'\n                                value={username}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Input\n                                placeholder='Password'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button content='Register' />\n                        </Form.Group>\n                    </Form>\n\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n",["91","92"],"/home/slechani/chat_app/frontend/src/Components/Chat.js",["93","94","95","96"],"/home/slechani/chat_app/frontend/src/Components/Chatbox.js",["97","98","99","100","101","102","103","104","105","106","107","108","109"],"/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js",["110","111","112","113","114"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaUser, FaUserAlt, FaPlus } from 'react-icons/fa';\nexport default class MessagesMenu extends Component {\n    state = {\n        activeIndex: 0,\n        hover: false,\n    };\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({hover: mouse_status})\n    }\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        const { activeIndex } = this.state\n        return (\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                <GridColumn className=\"no-padding\" width=\"16\">\n                    <Accordion>\n                        <Accordion.Title  onMouseEnter={() => {this.handleHover(true)}} onMouseLeave={() => {this.handleHover(false)}} className=\"workspace-submenu-row\"\n                            active={activeIndex === 0}\n                            index={0}\n                            onClick={this.handleClick}\n                           \n                        >\n                                <Icon className=\"white\" color=\"white\" name=\"dropdown\"></Icon>\n                            <span className=\"bold white\">Direct messages</span>\n\n                            {/* Start chat hover icon */}\n                            { this.state.hover === true &&\n                            <span className=\"menu-side-icon-container\">\n                                <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                            </span>\n                            }\n                        </Accordion.Title>\n                        <Accordion.Content active={activeIndex === 0}>\n                            <List className=\"collapsible-menu-list\">\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>admin</span>\n                                        <span>you</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>John</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>Jane</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaPlusSquare></FaPlusSquare></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        Send direct message\n                                    </List.Content>\n                                </List.Item>\n\n                            </List>\n                        </Accordion.Content>\n                    </Accordion>\n                </GridColumn>\n            </GridRow>\n        )\n    }\n}\n",["115","116"],"/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js",["117","118","119","120"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class ChangeTopic extends Component {\n  \n    state = {\n        open: false,\n        channel_topic: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    setTopic = () => {\n        const req_body = {\n            topic: this.state.channel_topic,            \n        }\n\n       Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_topic} = this.state \n        return (\n            <Modal className=\"\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"mini\"\n                trigger={<Button id=\"chat-channel-topic\" className=\"unstyled\">{this.props.topic}</Button>}\n            >\n                <Modal.Header className=\"create-chan-header\">Edit channel topic</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Form class=\"\">\n                        <Form.Field required>\n                        \n                        <Form.Input\n                                placeholder='Channel topic'\n                                name='channel_topic'\n                                label=\"Channel topic\"\n                                onChange={this.handleChange}                             \n                            />\n                        </Form.Field>\n                       \n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.setTopic}>\n                    Set Topic\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/Message.js",["121","122","123"],"import React, { Component } from 'react'\nimport { Grid } from 'semantic-ui-react';\n\nexport default class Message extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n\n    }\n\n\n    render() {\n        let local_date = new Date(this.props.date) \n        let time = local_date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})\n\n        return (\n\n            <div className=\"message-row\">\n\n                <div className=\"message-left-col\">\n                    {this.props.showUsername === false &&\n                        <span className=\"chat-message-side-time\">{time}</span>\n                    }\n                    {this.props.showUsername === true &&\n                        <img id=\"profile-img-chat-message\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48\"></img>\n\n                    }\n                </div>\n                <div className=\"message-right-col\">\n\n                    {this.props.showUsername === true &&\n                        <div className=\"chat-message-header\">\n                            <span className=\"chat-message-username\">\n                                {this.props.username}\n                            </span>\n                            <span className=\"chat-message-time\">\n                                {time} \n                        </span>\n                        </div>\n                    }\n                    <p className=\"chat-message\">\n                        {/* {this.props.message} */}\n                        <span dangerouslySetInnerHTML={{ __html: this.props.message }}></span>\n                    </p>\n                </div>\n            </div>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/index.js",["124","125"],"import '../node_modules/semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/slechani/chat_app/frontend/src/Pages/Login.js",["126","127","128","129"],"import React, { Component } from 'react'\nimport { Button, Grid, GridRow, GridColumn, Form } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport configData from  \"../config.json\";\n\nexport default class Register extends Component {\n\n    state = { username: '', password: '', submittedUsername: '', submittedPassword: '', redirect: false,}\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n        const { username, password } = this.state\n\n        this.setState({ submittedUsername: username, submittedPassword: password })\n        this.loginAccount(username, password)        \n    }\n\n    loginAccount = (username, password) => {\n        axios.post(configData.SERVER_URL + \"token/\", {username:username, password:password})\n        .then(res => {\n            localStorage.setItem(\"username\", username)\n            this.setState({redirect:true})\n        })\n        .catch(error => {\n            alert(\"Error : \" + error)\n        })\n    }\n\n    render() {\n        if (this.state.redirect === true){\n            return <Redirect to=\"/workspace\" />\n        }\n        const { username, password, submittedUsername, submittedPassword } = this.state \n        return (\n            <Grid verticalAlign=\"middle\" columns={4} >\n                <GridRow verticalAlign=\"middle\" centered>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Input\n                                placeholder='Username'\n                                name='username'\n                                value={username}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Input\n                                placeholder='Password'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button content='Login' />\n                        </Form.Group>\n                    </Form>\n\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n",["130","131"],"/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js",["132","133","134"],"/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js",["135","136"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class AddChannelModal extends Component {\n\n    state = {\n        open: false,\n        channel_name: \"\",\n        channel_desc: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    createChannel = () => {\n        const req_body = {\n            name: this.state.channel_name,\n            description: this.state.channel_desc,\n            channel_member: [localStorage.getItem(\"user_id\")],\n            channel_admin: [localStorage.getItem(\"user_id\")],\n            star_channels: [], \n            // topic: \" \",            \n        }\n\n       Axios.post(configData.SERVER_URL + \"channels/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_name, channel_desc} = this.state \n        return (\n\n\n            <Modal className=\"create-channel-modal\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                trigger={<List.Content className=\"channel-title-menu\">Add Channels</List.Content>}\n            >\n                <Modal.Header className=\"create-chan-header\">Create a Channel</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Modal.Description className=\"modal-desc\">\n                        <p className=\"secondary-text\">\n                            Channels are where your team communicates. They’re best when organized around a topic — #marketing, for example.\n                    </p>\n                    </Modal.Description>\n\n                    <Form class=\"\">\n                        <Form.Field required>\n                        <Form.Input\n                                placeholder='#channel_name'\n                                name='channel_name'\n                                label=\"Name\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                        <Form.Input\n                                placeholder=\"What's this channel about ?\"\n                                name='channel_desc'\n                                label=\"Description (Optional)\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Grid>\n                                <Grid.Row columns=\"16\">\n                                    <Grid.Column width=\"13\">\n                                        <Modal.Header className=\"bold\">\n                                            Make private\n                                    </Modal.Header>\n                                        <Modal.Description>\n                                            <p className=\"secondary-text\">\n                                            When a channel is set to private, it can only be viewed or joined by invitation.\n                                            </p>\n                                 </Modal.Description>\n\n                                    </Grid.Column>\n                                    <Grid.Column verticalAlign=\"middle\" width=\"3\">\n                                        <Checkbox  toggle />\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n                        </Form.Field>\n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.createChannel}>\n                    Create Channel\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js",["137","138","139","140"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Divider } from 'semantic-ui-react';\nimport WorkspaceName from './WorkspaceName';\nimport { VscFiles } from 'react-icons/vsc';\nimport { BsBookmark } from 'react-icons/bs';\nimport ChannelsMenu from './ChannelsMenu';\nimport { FaPlus, FaPlusSquare } from 'react-icons/fa';\nimport MessagesMenu from './MessagesMenu';\nimport Chat from './Chat';\n\nexport default class WorkspaceMenu extends Component {\n\n    state = {\n        refreshChat: false,\n    }\n\n    changeState = (name, value) => {\n        this.setState({[name]:value})\n    }\n\n    render() {\n        if (this.state.refreshChat === true){\n            this.setState({refreshChat: false})\n            this.props.changeState(\"refreshChat\", true)\n        }\n        \n        return (\n            <GridColumn className=\"workspace-menu\" width={2}>\n                <Grid className=\"text-not-selectable\">\n                    <GridRow className=\"workspace-main-row\">\n                        <GridColumn className=\"nopadding-nomargin\"  >\n                            <WorkspaceName title=\"Your Workspace\"></WorkspaceName>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Drafts */}\n                    <GridRow  id=\"drafts-row\" columns=\"16\" className=\"workspace-submenu-row side-menu-item no-padding\" >\n                        <GridColumn className=\"no-padding icon-col\" width=\"1\" >\n                            <VscFiles></VscFiles>\n                        </GridColumn>\n                        <GridColumn className=\"nopadding-nomargin\" width=\"14\">\n                            <span className=\"bold workspace-menu-text\">Drafts</span>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Saved Items */}\n                    <GridRow columns=\"16\" className=\"workspace-submenu-row side-menu-item\" >\n                        <GridColumn className=\" no-padding icon-col\" width=\"1\" >\n                            <BsBookmark></BsBookmark>\n                        </GridColumn>\n                        <GridColumn className=\"nopadding-nomargin\" width=\"14\">\n                            <span className=\"bold workspace-menu-text\">Saved items</span>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Starred Channels list */}\n                    <ChannelsMenu title=\"Starred channels\" starChannels={true} channels={this.props.starredChannels} refreshChannels={this.props.refreshChannels}  changeState={this.changeState} ></ChannelsMenu>\n                    \n                    {/* Standard Channels list */}\n                    <ChannelsMenu title=\"Channels\" starChannels={false} channels={this.props.channels} starredChannels={this.props.starredChannels} refreshChannels={this.props.refreshChannels}  changeState={this.changeState} ></ChannelsMenu>\n                    <MessagesMenu></MessagesMenu>\n                   \n                </Grid>\n                <GridColumn width={14}> \n            </GridColumn>\n            </GridColumn>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js",["141","142","143","144","145","146","147","148"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon, } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaPlus } from 'react-icons/fa';\nimport { Redirect } from \"react-router-dom\";\nimport AddChannelModal from './AddChannelModal.js';\n// import { ModalExampleModal } from \"../Components/AddChannelModal\";\n\n\n\nexport default class ChannelsMenu extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    state = {\n        activeIndex: 0,\n        hover: false,\n        channels: [],\n        profile_id: null,\n        redirect: false,\n        channel_to_load: null,\n        display_channels: false,\n    };\n\n    loadChannel = (channel_id) => {\n        const url = \"/workspace/\" + channel_id\n        this.setState({ redirect: true })\n        this.setState({ channel_to_load: url })\n    }\n\n    getActiveChannel = () => {\n        let url = window.location.pathname\n        url = url.split('/')[2]\n        return (parseInt(url))\n    }\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({ hover: mouse_status })\n\n    }\n\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        let display_channels = false\n        const { activeIndex } = this.state\n        const channels = this.props.channels.map((data, idx) => {\n            var active_channel = false\n            if (data.id === this.getActiveChannel()) {\n                active_channel = true\n            }\n            // Display channel if rendering fav list OR Display if rendering regular channels and channel isn't in fav list  \n            if (this.props.starChannels === true || (this.props.starChannels === false && this.props.starredChannels.find(function (el) { return el.id === data.id }) == undefined)) {\n                return (\n  \n                    <List.Item onClick={() => { this.loadChannel(data.id) }} className={`workspace-submenu-row-item ${active_channel ? \"active-item\" : \"\"}`} >\n                        <List.Icon > <FaHashtag></FaHashtag></List.Icon>\n                        <List.Content className=\"channel-title-menu\">\n                            {data.name}\n                        </List.Content>\n                    </List.Item>\n                )\n            }\n            else\n                return\n        })\n\n\n\n        if (this.state.redirect === true) {\n            this.setState({ redirect: false })\n            this.setState({ channel_to_load: null })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={this.state.channel_to_load} />\n        }\n        if (this.props.channels.length > 0 || this.props.starChannels === false)\n            display_channels = true\n\n        return (\n\n\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                {display_channels ?\n                    <GridColumn className=\"no-padding\" width=\"16\">\n                        <Accordion>\n                            <Accordion.Title onMouseEnter={() => { this.handleHover(true) }} onMouseLeave={() => { this.handleHover(false) }} className=\"workspace-submenu-row\"\n                                active={activeIndex === 0}\n                                index={0}\n                                onClick={this.handleClick}\n                            >\n                                <Icon color=\"white\" name=\"dropdown\"></Icon>\n                                <span className=\"white bold\">{this.props.title}</span>\n                                {/* Add Channel hover icon */}\n                                {this.state.hover === true && this.props.starChannels != true &&\n                                    <span className=\"menu-side-icon-container\">\n                                        <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                                    </span>\n                                }\n                            </Accordion.Title>\n                            <Accordion.Content active={activeIndex === 0}>\n                                <List className=\"collapsible-menu-list\">\n\n                                    {channels}\n                                    {this.props.starChannels != true &&\n                                        <List.Item className=\"workspace-submenu-row-item\">\n                                            <List.Icon >       <FaPlusSquare ></FaPlusSquare></List.Icon>\n\n                                            {/* Add channels */}\n\n                                            <AddChannelModal refreshChannels={this.props.refreshChannels}></AddChannelModal>\n\n\n                                        </List.Item>\n                                    }\n                                </List>\n                            </Accordion.Content>\n                        </Accordion>\n                    </GridColumn> :\n                    <span></span>\n                }\n            </GridRow>\n\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js",["149"],"import React, { Component } from 'react'\nimport { Menu, Popup, Segment, Icon } from 'semantic-ui-react'\nimport { VscInfo } from 'react-icons/vsc';\nimport Axios from 'axios';\nimport configData from \"../config.json\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default class ChannelMenu extends Component {\n\n    state = {\n        open: false,\n        redirect: false,\n        new_channel: 0,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    pickNewChannelToLoad = () => {\n        let new_channel_id = this.props.channels[0][\"id\"];\n        if (new_channel_id === this.props.channelId)\n            new_channel_id = this.props.channels[1][\"id\"]\n        return (new_channel_id)\n    }\n\n    removeUserFromList = (list) => {\n        let user_list = list\n        const user_id = parseInt(localStorage.getItem(\"user_id\"))\n        const index = user_list.indexOf(user_id)\n        if (index > -1){\n            user_list.splice(index, 1)\n            return (user_list)\n        }\n    }\n    \n    leaveChannel = () => {\n       \n        const req_data = {\n            channel_member: this.removeUserFromList(this.props.channelMembers)\n        }\n        this.setOpen(false);\n        Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_data)\n            .then((res) => {            \n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n        Axios.post(configData.SERVER_URL + \"starChannel/\", {profile_id: localStorage.getItem(\"user_id\"), channel_id:this.props.channelId})\n            .then((result) => {\n                this.props.refreshChannels()\n             })    \n            .catch((err) => {\n                console.log(err)\n            })  \n    }\n\n    deleteChannel = () => {\n        this.setOpen(false);\n        Axios.delete(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\")\n            .then((res) => {\n                this.props.refreshChannels()\n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n    }\n\n    render() {\n\n        if (this.state.redirect === true) {\n            let channel_url = \"/workspace/\" + this.state.new_channel;\n            this.setState({ redirect: false })\n            this.setState({ new_channel: 0 })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={channel_url} />\n        }\n        return (\n\n            <Popup id=\"header-menu-popup\"\n                trigger={<button className=\"unstyled\" id=\"chat-info-btn\" >\n                    <VscInfo size=\"2em\"></VscInfo>\n                </button>}\n                basic\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                position='bottom right'\n                content={<Menu className=\"menu-popup\"\n                    onItemClick={() => this.setOpen(false)}\n                    // secondary\n                    vertical\n                >\n                    <Menu.Item onClick={this.leaveChannel}>\n                        Leave channel\n                    <Icon name=\"log out\"></Icon>\n                    </Menu.Item>\n                    <Menu.Item onClick={this.deleteChannel}>\n                        Delete channel\n                    <Icon name=\"delete\"></Icon>\n                    </Menu.Item>\n\n                </Menu>\n\n                }\n                on='click'\n            >\n\n\n            </Popup>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/UserListModal.js",["150","151"],"/home/slechani/chat_app/frontend/src/App.js",["152","153"],"/home/slechani/chat_app/frontend/src/Components/ChatHeader.js",["154","155","156","157","158"],"/home/slechani/chat_app/frontend/src/Components/DateSeparator.js",["159"],{"ruleId":"160","severity":1,"message":"161","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":16},{"ruleId":"160","severity":1,"message":"164","line":2,"column":33,"nodeType":"162","messageId":"163","endLine":2,"endColumn":43},{"ruleId":"160","severity":1,"message":"165","line":34,"column":37,"nodeType":"162","messageId":"163","endLine":34,"endColumn":54},{"ruleId":"160","severity":1,"message":"166","line":34,"column":56,"nodeType":"162","messageId":"163","endLine":34,"endColumn":73},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"160","severity":1,"message":"171","line":2,"column":16,"nodeType":"162","messageId":"163","endLine":2,"endColumn":23},{"ruleId":"160","severity":1,"message":"172","line":2,"column":37,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"160","severity":1,"message":"173","line":2,"column":46,"nodeType":"162","messageId":"163","endLine":2,"endColumn":51},{"ruleId":"160","severity":1,"message":"174","line":70,"column":13,"nodeType":"162","messageId":"163","endLine":70,"endColumn":21},{"ruleId":"160","severity":1,"message":"173","line":4,"column":16,"nodeType":"162","messageId":"163","endLine":4,"endColumn":21},{"ruleId":"160","severity":1,"message":"171","line":4,"column":23,"nodeType":"162","messageId":"163","endLine":4,"endColumn":30},{"ruleId":"160","severity":1,"message":"175","line":4,"column":32,"nodeType":"162","messageId":"163","endLine":4,"endColumn":41},{"ruleId":"160","severity":1,"message":"176","line":4,"column":43,"nodeType":"162","messageId":"163","endLine":4,"endColumn":51},{"ruleId":"160","severity":1,"message":"161","line":4,"column":53,"nodeType":"162","messageId":"163","endLine":4,"endColumn":59},{"ruleId":"160","severity":1,"message":"177","line":4,"column":61,"nodeType":"162","messageId":"163","endLine":4,"endColumn":72},{"ruleId":"160","severity":1,"message":"178","line":8,"column":21,"nodeType":"162","messageId":"163","endLine":8,"endColumn":26},{"ruleId":"179","severity":1,"message":"180","line":28,"column":5,"nodeType":"181","messageId":"182","endLine":30,"endColumn":6},{"ruleId":"179","severity":1,"message":"180","line":55,"column":5,"nodeType":"181","messageId":"182","endLine":58,"endColumn":6},{"ruleId":"183","severity":1,"message":"184","line":72,"column":23,"nodeType":"185","messageId":"186","endLine":72,"endColumn":25},{"ruleId":"160","severity":1,"message":"187","line":114,"column":16,"nodeType":"162","messageId":"163","endLine":114,"endColumn":21},{"ruleId":"160","severity":1,"message":"188","line":114,"column":23,"nodeType":"162","messageId":"163","endLine":114,"endColumn":31},{"ruleId":"160","severity":1,"message":"189","line":115,"column":15,"nodeType":"162","messageId":"163","endLine":115,"endColumn":27},{"ruleId":"160","severity":1,"message":"190","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"191","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":23},{"ruleId":"160","severity":1,"message":"192","line":3,"column":25,"nodeType":"162","messageId":"163","endLine":3,"endColumn":34},{"ruleId":"160","severity":1,"message":"193","line":3,"column":50,"nodeType":"162","messageId":"163","endLine":3,"endColumn":56},{"ruleId":"183","severity":1,"message":"194","line":11,"column":26,"nodeType":"185","messageId":"186","endLine":11,"endColumn":28},{"ruleId":"167","replacedBy":"195"},{"ruleId":"169","replacedBy":"196"},{"ruleId":"160","severity":1,"message":"197","line":2,"column":17,"nodeType":"162","messageId":"163","endLine":2,"endColumn":21},{"ruleId":"160","severity":1,"message":"198","line":2,"column":37,"nodeType":"162","messageId":"163","endLine":2,"endColumn":45},{"ruleId":"160","severity":1,"message":"190","line":2,"column":47,"nodeType":"162","messageId":"163","endLine":2,"endColumn":51},{"ruleId":"160","severity":1,"message":"199","line":37,"column":17,"nodeType":"162","messageId":"163","endLine":37,"endColumn":30},{"ruleId":"160","severity":1,"message":"190","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"179","severity":1,"message":"180","line":5,"column":5,"nodeType":"181","messageId":"182","endLine":7,"endColumn":6},{"ruleId":"200","severity":1,"message":"201","line":27,"column":25,"nodeType":"202","endLine":27,"endColumn":132},{"ruleId":"160","severity":1,"message":"203","line":8,"column":25,"nodeType":"162","messageId":"163","endLine":8,"endColumn":30},{"ruleId":"160","severity":1,"message":"204","line":8,"column":32,"nodeType":"162","messageId":"163","endLine":8,"endColumn":38},{"ruleId":"160","severity":1,"message":"161","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":16},{"ruleId":"160","severity":1,"message":"164","line":2,"column":33,"nodeType":"162","messageId":"163","endLine":2,"endColumn":43},{"ruleId":"160","severity":1,"message":"165","line":35,"column":37,"nodeType":"162","messageId":"163","endLine":35,"endColumn":54},{"ruleId":"160","severity":1,"message":"166","line":35,"column":56,"nodeType":"162","messageId":"163","endLine":35,"endColumn":73},{"ruleId":"167","replacedBy":"205"},{"ruleId":"169","replacedBy":"206"},{"ruleId":"160","severity":1,"message":"172","line":3,"column":16,"nodeType":"162","messageId":"163","endLine":3,"endColumn":23},{"ruleId":"179","severity":1,"message":"180","line":8,"column":5,"nodeType":"181","messageId":"182","endLine":11,"endColumn":6},{"ruleId":"183","severity":1,"message":"194","line":70,"column":34,"nodeType":"185","messageId":"186","endLine":70,"endColumn":36},{"ruleId":"160","severity":1,"message":"207","line":43,"column":17,"nodeType":"162","messageId":"163","endLine":43,"endColumn":29},{"ruleId":"160","severity":1,"message":"208","line":43,"column":31,"nodeType":"162","messageId":"163","endLine":43,"endColumn":43},{"ruleId":"160","severity":1,"message":"172","line":2,"column":37,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"160","severity":1,"message":"209","line":7,"column":10,"nodeType":"162","messageId":"163","endLine":7,"endColumn":16},{"ruleId":"160","severity":1,"message":"210","line":7,"column":18,"nodeType":"162","messageId":"163","endLine":7,"endColumn":30},{"ruleId":"160","severity":1,"message":"211","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":12},{"ruleId":"160","severity":1,"message":"190","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":14},{"ruleId":"160","severity":1,"message":"191","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":23},{"ruleId":"179","severity":1,"message":"180","line":12,"column":5,"nodeType":"181","messageId":"182","endLine":14,"endColumn":6},{"ruleId":"183","severity":1,"message":"194","line":39,"column":26,"nodeType":"185","messageId":"186","endLine":39,"endColumn":28},{"ruleId":"183","severity":1,"message":"184","line":61,"column":167,"nodeType":"185","messageId":"186","endLine":61,"endColumn":169},{"ruleId":"212","severity":1,"message":"213","line":73,"column":17,"nodeType":"214","messageId":"215","endLine":73,"endColumn":23},{"ruleId":"183","severity":1,"message":"194","line":102,"column":87,"nodeType":"185","messageId":"186","endLine":102,"endColumn":89},{"ruleId":"183","severity":1,"message":"194","line":112,"column":62,"nodeType":"185","messageId":"186","endLine":112,"endColumn":64},{"ruleId":"160","severity":1,"message":"216","line":2,"column":23,"nodeType":"162","messageId":"163","endLine":2,"endColumn":30},{"ruleId":"160","severity":1,"message":"217","line":2,"column":38,"nodeType":"162","messageId":"163","endLine":2,"endColumn":44},{"ruleId":"200","severity":1,"message":"201","line":38,"column":25,"nodeType":"202","endLine":38,"endColumn":124},{"ruleId":"160","severity":1,"message":"218","line":1,"column":8,"nodeType":"162","messageId":"163","endLine":1,"endColumn":12},{"ruleId":"160","severity":1,"message":"219","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":23},{"ruleId":"160","severity":1,"message":"220","line":2,"column":25,"nodeType":"162","messageId":"163","endLine":2,"endColumn":30},{"ruleId":"160","severity":1,"message":"221","line":2,"column":46,"nodeType":"162","messageId":"163","endLine":2,"endColumn":51},{"ruleId":"160","severity":1,"message":"222","line":3,"column":10,"nodeType":"162","messageId":"163","endLine":3,"endColumn":17},{"ruleId":"160","severity":1,"message":"223","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":16},{"ruleId":"160","severity":1,"message":"224","line":6,"column":10,"nodeType":"162","messageId":"163","endLine":6,"endColumn":17},{"ruleId":"160","severity":1,"message":"172","line":2,"column":10,"nodeType":"162","messageId":"163","endLine":2,"endColumn":17},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'GridColumn' is defined but never used.","'submittedUsername' is assigned a value but never used.","'submittedPassword' is assigned a value but never used.","no-native-reassign",["225"],"no-negated-in-lhs",["226"],"'GridRow' is defined but never used.","'Divider' is defined but never used.","'Input' is defined but never used.","'messages' is assigned a value but never used.","'Container' is defined but never used.","'TextArea' is defined but never used.","'ButtonGroup' is defined but never used.","'Quill' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'quillToolbar' is assigned a value but never used.","'Grid' is defined but never used.","'FaChevronDown' is defined but never used.","'FaHashtag' is defined but never used.","'FaUser' is defined but never used.","Expected '!==' and instead saw '!='.",["225"],["226"],"'List' is defined but never used.","'Checkbox' is defined but never used.","'channel_topic' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Route' is defined but never used.","'Switch' is defined but never used.",["225"],["226"],"'channel_name' is assigned a value but never used.","'channel_desc' is assigned a value but never used.","'FaPlus' is defined but never used.","'FaPlusSquare' is defined but never used.","'Chat' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'Segment' is defined but never used.","'Search' is defined but never used.","'logo' is defined but never used.","'BrowserRouter' is defined but never used.","'Image' is defined but never used.","'Popup' is defined but never used.","'FaPause' is defined but never used.","'BsStar' is defined but never used.","'VscInfo' is defined but never used.","no-global-assign","no-unsafe-negation"]