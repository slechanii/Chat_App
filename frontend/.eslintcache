[{"/home/slechani/chat_app/frontend/src/reportWebVitals.js":"1","/home/slechani/chat_app/frontend/src/Pages/Register.js":"2","/home/slechani/chat_app/frontend/src/Components/Chat.js":"3","/home/slechani/chat_app/frontend/src/Components/Chatbox.js":"4","/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js":"5","/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js":"6","/home/slechani/chat_app/frontend/src/Components/Message.js":"7","/home/slechani/chat_app/frontend/src/index.js":"8","/home/slechani/chat_app/frontend/src/Pages/Login.js":"9","/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js":"10","/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js":"11","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js":"12","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js":"13","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js":"14","/home/slechani/chat_app/frontend/src/Components/UserListModal.js":"15","/home/slechani/chat_app/frontend/src/App.js":"16","/home/slechani/chat_app/frontend/src/Components/ChatHeader.js":"17"},{"size":362,"mtime":1607523001563,"results":"18","hashOfConfig":"19"},{"size":2275,"mtime":1607971464348,"results":"20","hashOfConfig":"19"},{"size":3819,"mtime":1610861435301,"results":"21","hashOfConfig":"19"},{"size":5926,"mtime":1610861500663,"results":"22","hashOfConfig":"19"},{"size":3918,"mtime":1610769970260,"results":"23","hashOfConfig":"19"},{"size":2350,"mtime":1608910683121,"results":"24","hashOfConfig":"19"},{"size":1700,"mtime":1610800311243,"results":"25","hashOfConfig":"19"},{"size":628,"mtime":1608439606892,"results":"26","hashOfConfig":"19"},{"size":2230,"mtime":1607971620643,"results":"27","hashOfConfig":"19"},{"size":2623,"mtime":1608659956762,"results":"28","hashOfConfig":"19"},{"size":4324,"mtime":1610770283313,"results":"29","hashOfConfig":"19"},{"size":3089,"mtime":1610770706217,"results":"30","hashOfConfig":"19"},{"size":5167,"mtime":1610773582275,"results":"31","hashOfConfig":"19"},{"size":3782,"mtime":1610764892491,"results":"32","hashOfConfig":"19"},{"size":2596,"mtime":1608922314486,"results":"33","hashOfConfig":"19"},{"size":615,"mtime":1608439575519,"results":"34","hashOfConfig":"19"},{"size":3833,"mtime":1610764542661,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nhe71c",{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"41"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"41"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/slechani/chat_app/frontend/src/reportWebVitals.js",[],"/home/slechani/chat_app/frontend/src/Pages/Register.js",["84","85","86","87"],"import React, { Component } from 'react'\nimport { Button, Grid, GridRow, GridColumn, Form } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport configData from  \"../config.json\";\n\nexport default class Register extends Component {\n\n    state = {\n        username: '', password: '', submittedUsername: '', submittedPassword: '', redirect: false,\n    }\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n        const { username, password } = this.state\n\n        this.setState({ submittedUsername: username, submittedPassword: password })\n        this.registerAccount(username, password)\n    }\n\n    registerAccount = (username, password) => {\n        axios.post(configData.SERVER_URL + \"users/\", { username: username, password: password })\n            .then(res => {\n                localStorage.setItem(\"username\", username)\n                this.setState({redirect:true})\n            })\n            .catch(error => {\n                alert(\"Error : \" + error)\n            })\n    }\n\n    render() {\n        const { username, password, submittedUsername, submittedPassword } = this.state\n        if (this.state.redirect === true){\n            return <Redirect to=\"/workspace\" />\n        }\n        return (\n            <Grid verticalAlign=\"middle\" columns={4} >\n                <GridRow verticalAlign=\"middle\" centered>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Input\n                                placeholder='Username'\n                                name='username'\n                                value={username}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Input\n                                placeholder='Password'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button content='Register' />\n                        </Form.Group>\n                    </Form>\n\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n",["88","89"],"/home/slechani/chat_app/frontend/src/Components/Chat.js",["90","91","92","93"],"/home/slechani/chat_app/frontend/src/Components/Chatbox.js",["94","95","96","97","98","99","100","101","102","103","104","105"],"/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js",["106","107","108","109","110"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaUser, FaUserAlt, FaPlus } from 'react-icons/fa';\nexport default class MessagesMenu extends Component {\n    state = {\n        activeIndex: 0,\n        hover: false,\n    };\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({hover: mouse_status})\n    }\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        const { activeIndex } = this.state\n        return (\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                <GridColumn className=\"no-padding\" width=\"16\">\n                    <Accordion>\n                        <Accordion.Title  onMouseEnter={() => {this.handleHover(true)}} onMouseLeave={() => {this.handleHover(false)}} className=\"workspace-submenu-row\"\n                            active={activeIndex === 0}\n                            index={0}\n                            onClick={this.handleClick}\n                           \n                        >\n                                <Icon className=\"white\" color=\"white\" name=\"dropdown\"></Icon>\n                            <span className=\"bold white\">Direct messages</span>\n\n                            {/* Start chat hover icon */}\n                            { this.state.hover === true &&\n                            <span className=\"menu-side-icon-container\">\n                                <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                            </span>\n                            }\n                        </Accordion.Title>\n                        <Accordion.Content active={activeIndex === 0}>\n                            <List className=\"collapsible-menu-list\">\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>admin</span>\n                                        <span>you</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>John</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>Jane</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaPlusSquare></FaPlusSquare></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        Send direct message\n                                    </List.Content>\n                                </List.Item>\n\n                            </List>\n                        </Accordion.Content>\n                    </Accordion>\n                </GridColumn>\n            </GridRow>\n        )\n    }\n}\n",["111","112"],"/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js",["113","114","115","116"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class ChangeTopic extends Component {\n  \n    state = {\n        open: false,\n        channel_topic: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    setTopic = () => {\n        const req_body = {\n            topic: this.state.channel_topic,            \n        }\n\n       Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_topic} = this.state \n        return (\n            <Modal className=\"\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"mini\"\n                trigger={<Button id=\"chat-channel-topic\" className=\"unstyled\">{this.props.topic}</Button>}\n            >\n                <Modal.Header className=\"create-chan-header\">Edit channel topic</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Form class=\"\">\n                        <Form.Field required>\n                        \n                        <Form.Input\n                                placeholder='Channel topic'\n                                name='channel_topic'\n                                label=\"Channel topic\"\n                                onChange={this.handleChange}                             \n                            />\n                        </Form.Field>\n                       \n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.setTopic}>\n                    Set Topic\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/Message.js",["117","118","119"],"import React, { Component } from 'react'\nimport { Grid } from 'semantic-ui-react';\n\nexport default class Message extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n\n    }\n\n\n    render() {\n        let local_date = new Date(this.props.date) \n        let time = local_date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})\n\n        return (\n\n            <div className=\"message-row\">\n\n                <div className=\"message-left-col\">\n                    {this.props.showUsername === false &&\n                        <span className=\"chat-message-side-time\">{time}</span>\n                    }\n                    {this.props.showUsername === true &&\n                        <img id=\"profile-img-chat-message\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48\"></img>\n\n                    }\n                </div>\n                <div className=\"message-right-col\">\n\n                    {this.props.showUsername === true &&\n                        <div className=\"chat-message-header\">\n                            <span className=\"chat-message-username\">\n                                {this.props.username}\n                            </span>\n                            <span className=\"chat-message-time\">\n                                {time} \n                        </span>\n                        </div>\n                    }\n                    <p className=\"chat-message\">\n                        {/* {this.props.message} */}\n                        <span dangerouslySetInnerHTML={{ __html: this.props.message }}></span>\n                    </p>\n                </div>\n            </div>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/index.js",["120","121"],"import '../node_modules/semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/slechani/chat_app/frontend/src/Pages/Login.js",["122","123","124","125"],"import React, { Component } from 'react'\nimport { Button, Grid, GridRow, GridColumn, Form } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport configData from  \"../config.json\";\n\nexport default class Register extends Component {\n\n    state = { username: '', password: '', submittedUsername: '', submittedPassword: '', redirect: false,}\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n        const { username, password } = this.state\n\n        this.setState({ submittedUsername: username, submittedPassword: password })\n        this.loginAccount(username, password)        \n    }\n\n    loginAccount = (username, password) => {\n        axios.post(configData.SERVER_URL + \"token/\", {username:username, password:password})\n        .then(res => {\n            localStorage.setItem(\"username\", username)\n            this.setState({redirect:true})\n        })\n        .catch(error => {\n            alert(\"Error : \" + error)\n        })\n    }\n\n    render() {\n        if (this.state.redirect === true){\n            return <Redirect to=\"/workspace\" />\n        }\n        const { username, password, submittedUsername, submittedPassword } = this.state \n        return (\n            <Grid verticalAlign=\"middle\" columns={4} >\n                <GridRow verticalAlign=\"middle\" centered>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Input\n                                placeholder='Username'\n                                name='username'\n                                value={username}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Input\n                                placeholder='Password'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button content='Login' />\n                        </Form.Group>\n                    </Form>\n\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n",["126","127"],"/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js",["128","129"],"import React, { Component } from 'react'\nimport Message from './Message';\nimport { Grid } from 'semantic-ui-react';\nimport jquery from 'jquery';\n\nexport default class MessageDisplay extends Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    state = {\n        deltaY: 0,\n        maxDelta: 0,\n    }\n\n    componentDidMount() {\n        // IE, Chrome, Safari, Opera\n        window.addEventListener(\"wheel\", this.scrollHandler);\n\n        // Firefox\n        window.addEventListener(\"DOMMouseScroll\", this.scrollHandler);\n\n        const maxDelta = jquery(\".container-content\").height() - window.innerHeight;\n\n        this.setState({\n            maxDelta\n        });\n\n        jquery(\".container-content.left\").css(\n            \"transform\",\n            `translateY(-${jquery(\".container-content\").height()}px)`\n        );\n        this.scrollToBottom();\n    }\n\n    componentDidUpdate () {\n        this.scrollToBottom();\n    }\n\n    // Scroll to bottom of chat\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n      }\n      \n\n    scrollHandler = event => {\n        this.setState(state => {\n            let newDeltaY = state.deltaY + event.deltaY;\n\n            newDeltaY = Math.max(0, newDeltaY);\n            newDeltaY = Math.min(this.state.maxDelta, newDeltaY);\n\n            return {\n                deltaY: newDeltaY\n            };\n        });\n    };\n\n\n\n    render() {\n        /* Checking if current message username is the same as the previous one, changing display\n           of message depending on it like on the official Slack. */\n        var old_username = \"jdajzdjzajdjadjajd\"\n        let messages = this.props.messages.map((data, idx) => {\n            var showUsername = false\n            var current_username = this.props.messages[idx].sender_name\n            if (current_username != old_username)\n                showUsername = true\n            old_username = current_username\n            return (\n                <div className=\"\">\n                    <Message showUsername={showUsername} date={data.sent_date} username={data.sender_name} message={data.content}></Message>\n                </div>\n            )\n        })\n        return (\n            <Grid.Row className=\"message-display-container\">\n                <div className=\"\">\n                    {messages}\n\n                    {/* Blank div to make scroll to bottom easy */}\n                    <div style={{ float: \"left\", clear: \"both\" }}\n                        ref={(el) => { this.messagesEnd = el; }}>\n                    </div>\n                </div>\n\n            </Grid.Row>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js",["130","131"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class AddChannelModal extends Component {\n\n    state = {\n        open: false,\n        channel_name: \"\",\n        channel_desc: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    createChannel = () => {\n        const req_body = {\n            name: this.state.channel_name,\n            description: this.state.channel_desc,\n            channel_member: [localStorage.getItem(\"user_id\")],\n            channel_admin: [localStorage.getItem(\"user_id\")],\n            star_channels: [], \n            // topic: \" \",            \n        }\n\n       Axios.post(configData.SERVER_URL + \"channels/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_name, channel_desc} = this.state \n        return (\n\n\n            <Modal className=\"create-channel-modal\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                trigger={<List.Content className=\"channel-title-menu\">Add Channels</List.Content>}\n            >\n                <Modal.Header className=\"create-chan-header\">Create a Channel</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Modal.Description className=\"modal-desc\">\n                        <p className=\"secondary-text\">\n                            Channels are where your team communicates. They’re best when organized around a topic — #marketing, for example.\n                    </p>\n                    </Modal.Description>\n\n                    <Form class=\"\">\n                        <Form.Field required>\n                        <Form.Input\n                                placeholder='#channel_name'\n                                name='channel_name'\n                                label=\"Name\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                        <Form.Input\n                                placeholder=\"What's this channel about ?\"\n                                name='channel_desc'\n                                label=\"Description (Optional)\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Grid>\n                                <Grid.Row columns=\"16\">\n                                    <Grid.Column width=\"13\">\n                                        <Modal.Header className=\"bold\">\n                                            Make private\n                                    </Modal.Header>\n                                        <Modal.Description>\n                                            <p className=\"secondary-text\">\n                                            When a channel is set to private, it can only be viewed or joined by invitation.\n                                            </p>\n                                 </Modal.Description>\n\n                                    </Grid.Column>\n                                    <Grid.Column verticalAlign=\"middle\" width=\"3\">\n                                        <Checkbox  toggle />\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n                        </Form.Field>\n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.createChannel}>\n                    Create Channel\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js",["132","133","134","135"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Divider } from 'semantic-ui-react';\nimport WorkspaceName from './WorkspaceName';\nimport { VscFiles } from 'react-icons/vsc';\nimport { BsBookmark } from 'react-icons/bs';\nimport ChannelsMenu from './ChannelsMenu';\nimport { FaPlus, FaPlusSquare } from 'react-icons/fa';\nimport MessagesMenu from './MessagesMenu';\nimport Chat from './Chat';\n\nexport default class WorkspaceMenu extends Component {\n\n    state = {\n        refreshChat: false,\n    }\n\n    changeState = (name, value) => {\n        this.setState({[name]:value})\n    }\n\n    render() {\n        if (this.state.refreshChat === true){\n            this.setState({refreshChat: false})\n            this.props.changeState(\"refreshChat\", true)\n        }\n        \n        return (\n            <GridColumn className=\"workspace-menu\" width={2}>\n                <Grid className=\"text-not-selectable\">\n                    <GridRow className=\"workspace-main-row\">\n                        <GridColumn className=\"nopadding-nomargin\"  >\n                            <WorkspaceName title=\"Your Workspace\"></WorkspaceName>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Drafts */}\n                    <GridRow  id=\"drafts-row\" columns=\"16\" className=\"workspace-submenu-row side-menu-item no-padding\" >\n                        <GridColumn className=\"no-padding icon-col\" width=\"1\" >\n                            <VscFiles></VscFiles>\n                        </GridColumn>\n                        <GridColumn className=\"nopadding-nomargin\" width=\"14\">\n                            <span className=\"bold workspace-menu-text\">Drafts</span>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Saved Items */}\n                    <GridRow columns=\"16\" className=\"workspace-submenu-row side-menu-item\" >\n                        <GridColumn className=\" no-padding icon-col\" width=\"1\" >\n                            <BsBookmark></BsBookmark>\n                        </GridColumn>\n                        <GridColumn className=\"nopadding-nomargin\" width=\"14\">\n                            <span className=\"bold workspace-menu-text\">Saved items</span>\n                        </GridColumn>\n                    </GridRow>\n\n                    {/* Starred Channels list */}\n                    <ChannelsMenu title=\"Starred channels\" starChannels={true} channels={this.props.starredChannels} refreshChannels={this.props.refreshChannels}  changeState={this.changeState} ></ChannelsMenu>\n                    \n                    {/* Standard Channels list */}\n                    <ChannelsMenu title=\"Channels\" starChannels={false} channels={this.props.channels} starredChannels={this.props.starredChannels} refreshChannels={this.props.refreshChannels}  changeState={this.changeState} ></ChannelsMenu>\n                    <MessagesMenu></MessagesMenu>\n                   \n                </Grid>\n                <GridColumn width={14}> \n            </GridColumn>\n            </GridColumn>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js",["136","137","138","139","140","141","142","143"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon, } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaPlus } from 'react-icons/fa';\nimport { Redirect } from \"react-router-dom\";\nimport AddChannelModal from './AddChannelModal.js';\n// import { ModalExampleModal } from \"../Components/AddChannelModal\";\n\n\n\nexport default class ChannelsMenu extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    state = {\n        activeIndex: 0,\n        hover: false,\n        channels: [],\n        profile_id: null,\n        redirect: false,\n        channel_to_load: null,\n        display_channels: false,\n    };\n\n    loadChannel = (channel_id) => {\n        const url = \"/workspace/\" + channel_id\n        this.setState({ redirect: true })\n        this.setState({ channel_to_load: url })\n    }\n\n    getActiveChannel = () => {\n        let url = window.location.pathname\n        url = url.split('/')[2]\n        return (parseInt(url))\n    }\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({ hover: mouse_status })\n\n    }\n\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        let display_channels = false\n        const { activeIndex } = this.state\n        const channels = this.props.channels.map((data, idx) => {\n            var active_channel = false\n            if (data.id === this.getActiveChannel()) {\n                active_channel = true\n            }\n            // Display channel if rendering fav list OR Display if rendering regular channels and channel isn't in fav list  \n            if (this.props.starChannels === true || (this.props.starChannels === false && this.props.starredChannels.find(function (el) { return el.id === data.id }) == undefined)) {\n                return (\n  \n                    <List.Item onClick={() => { this.loadChannel(data.id) }} className={`workspace-submenu-row-item ${active_channel ? \"active-item\" : \"\"}`} >\n                        <List.Icon > <FaHashtag></FaHashtag></List.Icon>\n                        <List.Content className=\"channel-title-menu\">\n                            {data.name}\n                        </List.Content>\n                    </List.Item>\n                )\n            }\n            else\n                return\n        })\n\n\n\n        if (this.state.redirect === true) {\n            this.setState({ redirect: false })\n            this.setState({ channel_to_load: null })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={this.state.channel_to_load} />\n        }\n        if (this.props.channels.length > 0 || this.props.starChannels === false)\n            display_channels = true\n\n        return (\n\n\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                {display_channels ?\n                    <GridColumn className=\"no-padding\" width=\"16\">\n                        <Accordion>\n                            <Accordion.Title onMouseEnter={() => { this.handleHover(true) }} onMouseLeave={() => { this.handleHover(false) }} className=\"workspace-submenu-row\"\n                                active={activeIndex === 0}\n                                index={0}\n                                onClick={this.handleClick}\n                            >\n                                <Icon color=\"white\" name=\"dropdown\"></Icon>\n                                <span className=\"white bold\">{this.props.title}</span>\n                                {/* Add Channel hover icon */}\n                                {this.state.hover === true && this.props.starChannels != true &&\n                                    <span className=\"menu-side-icon-container\">\n                                        <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                                    </span>\n                                }\n                            </Accordion.Title>\n                            <Accordion.Content active={activeIndex === 0}>\n                                <List className=\"collapsible-menu-list\">\n\n                                    {channels}\n                                    {this.props.starChannels != true &&\n                                        <List.Item className=\"workspace-submenu-row-item\">\n                                            <List.Icon >       <FaPlusSquare ></FaPlusSquare></List.Icon>\n\n                                            {/* Add channels */}\n\n                                            <AddChannelModal refreshChannels={this.props.refreshChannels}></AddChannelModal>\n\n\n                                        </List.Item>\n                                    }\n                                </List>\n                            </Accordion.Content>\n                        </Accordion>\n                    </GridColumn> :\n                    <span></span>\n                }\n            </GridRow>\n\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js",["144"],"import React, { Component } from 'react'\nimport { Menu, Popup, Segment, Icon } from 'semantic-ui-react'\nimport { VscInfo } from 'react-icons/vsc';\nimport Axios from 'axios';\nimport configData from \"../config.json\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default class ChannelMenu extends Component {\n\n    state = {\n        open: false,\n        redirect: false,\n        new_channel: 0,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    pickNewChannelToLoad = () => {\n        let new_channel_id = this.props.channels[0][\"id\"];\n        if (new_channel_id === this.props.channelId)\n            new_channel_id = this.props.channels[1][\"id\"]\n        return (new_channel_id)\n    }\n\n    removeUserFromList = (list) => {\n        let user_list = list\n        const user_id = parseInt(localStorage.getItem(\"user_id\"))\n        const index = user_list.indexOf(user_id)\n        if (index > -1){\n            user_list.splice(index, 1)\n            return (user_list)\n        }\n    }\n    \n    leaveChannel = () => {\n       \n        const req_data = {\n            channel_member: this.removeUserFromList(this.props.channelMembers)\n        }\n        this.setOpen(false);\n        Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_data)\n            .then((res) => {            \n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n        Axios.post(configData.SERVER_URL + \"starChannel/\", {profile_id: localStorage.getItem(\"user_id\"), channel_id:this.props.channelId})\n            .then((result) => {\n                this.props.refreshChannels()\n             })    \n            .catch((err) => {\n                console.log(err)\n            })  \n    }\n\n    deleteChannel = () => {\n        this.setOpen(false);\n        Axios.delete(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\")\n            .then((res) => {\n                this.props.refreshChannels()\n                this.setState({ redirect: true })\n                this.setState({ new_channel: this.pickNewChannelToLoad() })\n                this.setState({ redirect: true })\n            })\n    }\n\n    render() {\n\n        if (this.state.redirect === true) {\n            let channel_url = \"/workspace/\" + this.state.new_channel;\n            this.setState({ redirect: false })\n            this.setState({ new_channel: 0 })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={channel_url} />\n        }\n        return (\n\n            <Popup id=\"header-menu-popup\"\n                trigger={<button className=\"unstyled\" id=\"chat-info-btn\" >\n                    <VscInfo size=\"2em\"></VscInfo>\n                </button>}\n                basic\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                position='bottom right'\n                content={<Menu className=\"menu-popup\"\n                    onItemClick={() => this.setOpen(false)}\n                    // secondary\n                    vertical\n                >\n                    <Menu.Item onClick={this.leaveChannel}>\n                        Leave channel\n                    <Icon name=\"log out\"></Icon>\n                    </Menu.Item>\n                    <Menu.Item onClick={this.deleteChannel}>\n                        Delete channel\n                    <Icon name=\"delete\"></Icon>\n                    </Menu.Item>\n\n                </Menu>\n\n                }\n                on='click'\n            >\n\n\n            </Popup>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/UserListModal.js",["145","146"],"/home/slechani/chat_app/frontend/src/App.js",["147","148"],"/home/slechani/chat_app/frontend/src/Components/ChatHeader.js",["149","150","151","152","153"],{"ruleId":"154","severity":1,"message":"155","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":16},{"ruleId":"154","severity":1,"message":"158","line":2,"column":33,"nodeType":"156","messageId":"157","endLine":2,"endColumn":43},{"ruleId":"154","severity":1,"message":"159","line":34,"column":37,"nodeType":"156","messageId":"157","endLine":34,"endColumn":54},{"ruleId":"154","severity":1,"message":"160","line":34,"column":56,"nodeType":"156","messageId":"157","endLine":34,"endColumn":73},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"154","severity":1,"message":"165","line":2,"column":16,"nodeType":"156","messageId":"157","endLine":2,"endColumn":23},{"ruleId":"154","severity":1,"message":"166","line":2,"column":37,"nodeType":"156","messageId":"157","endLine":2,"endColumn":44},{"ruleId":"154","severity":1,"message":"167","line":2,"column":46,"nodeType":"156","messageId":"157","endLine":2,"endColumn":51},{"ruleId":"154","severity":1,"message":"168","line":70,"column":13,"nodeType":"156","messageId":"157","endLine":70,"endColumn":21},{"ruleId":"154","severity":1,"message":"167","line":4,"column":16,"nodeType":"156","messageId":"157","endLine":4,"endColumn":21},{"ruleId":"154","severity":1,"message":"165","line":4,"column":23,"nodeType":"156","messageId":"157","endLine":4,"endColumn":30},{"ruleId":"154","severity":1,"message":"169","line":4,"column":32,"nodeType":"156","messageId":"157","endLine":4,"endColumn":41},{"ruleId":"154","severity":1,"message":"170","line":4,"column":43,"nodeType":"156","messageId":"157","endLine":4,"endColumn":51},{"ruleId":"154","severity":1,"message":"155","line":4,"column":53,"nodeType":"156","messageId":"157","endLine":4,"endColumn":59},{"ruleId":"154","severity":1,"message":"171","line":4,"column":61,"nodeType":"156","messageId":"157","endLine":4,"endColumn":72},{"ruleId":"154","severity":1,"message":"172","line":8,"column":21,"nodeType":"156","messageId":"157","endLine":8,"endColumn":26},{"ruleId":"173","severity":1,"message":"174","line":32,"column":5,"nodeType":"175","messageId":"176","endLine":35,"endColumn":6},{"ruleId":"177","severity":1,"message":"178","line":49,"column":23,"nodeType":"179","messageId":"180","endLine":49,"endColumn":25},{"ruleId":"154","severity":1,"message":"181","line":86,"column":16,"nodeType":"156","messageId":"157","endLine":86,"endColumn":21},{"ruleId":"154","severity":1,"message":"182","line":86,"column":23,"nodeType":"156","messageId":"157","endLine":86,"endColumn":31},{"ruleId":"154","severity":1,"message":"183","line":87,"column":15,"nodeType":"156","messageId":"157","endLine":87,"endColumn":27},{"ruleId":"154","severity":1,"message":"184","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":14},{"ruleId":"154","severity":1,"message":"185","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":23},{"ruleId":"154","severity":1,"message":"186","line":3,"column":25,"nodeType":"156","messageId":"157","endLine":3,"endColumn":34},{"ruleId":"154","severity":1,"message":"187","line":3,"column":50,"nodeType":"156","messageId":"157","endLine":3,"endColumn":56},{"ruleId":"177","severity":1,"message":"188","line":11,"column":26,"nodeType":"179","messageId":"180","endLine":11,"endColumn":28},{"ruleId":"161","replacedBy":"189"},{"ruleId":"163","replacedBy":"190"},{"ruleId":"154","severity":1,"message":"191","line":2,"column":17,"nodeType":"156","messageId":"157","endLine":2,"endColumn":21},{"ruleId":"154","severity":1,"message":"192","line":2,"column":37,"nodeType":"156","messageId":"157","endLine":2,"endColumn":45},{"ruleId":"154","severity":1,"message":"184","line":2,"column":47,"nodeType":"156","messageId":"157","endLine":2,"endColumn":51},{"ruleId":"154","severity":1,"message":"193","line":37,"column":17,"nodeType":"156","messageId":"157","endLine":37,"endColumn":30},{"ruleId":"154","severity":1,"message":"184","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":14},{"ruleId":"173","severity":1,"message":"174","line":5,"column":5,"nodeType":"175","messageId":"176","endLine":7,"endColumn":6},{"ruleId":"194","severity":1,"message":"195","line":27,"column":25,"nodeType":"196","endLine":27,"endColumn":132},{"ruleId":"154","severity":1,"message":"197","line":8,"column":25,"nodeType":"156","messageId":"157","endLine":8,"endColumn":30},{"ruleId":"154","severity":1,"message":"198","line":8,"column":32,"nodeType":"156","messageId":"157","endLine":8,"endColumn":38},{"ruleId":"154","severity":1,"message":"155","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":16},{"ruleId":"154","severity":1,"message":"158","line":2,"column":33,"nodeType":"156","messageId":"157","endLine":2,"endColumn":43},{"ruleId":"154","severity":1,"message":"159","line":35,"column":37,"nodeType":"156","messageId":"157","endLine":35,"endColumn":54},{"ruleId":"154","severity":1,"message":"160","line":35,"column":56,"nodeType":"156","messageId":"157","endLine":35,"endColumn":73},{"ruleId":"161","replacedBy":"199"},{"ruleId":"163","replacedBy":"200"},{"ruleId":"173","severity":1,"message":"174","line":7,"column":5,"nodeType":"175","messageId":"176","endLine":10,"endColumn":6},{"ruleId":"177","severity":1,"message":"188","line":69,"column":34,"nodeType":"179","messageId":"180","endLine":69,"endColumn":36},{"ruleId":"154","severity":1,"message":"201","line":43,"column":17,"nodeType":"156","messageId":"157","endLine":43,"endColumn":29},{"ruleId":"154","severity":1,"message":"202","line":43,"column":31,"nodeType":"156","messageId":"157","endLine":43,"endColumn":43},{"ruleId":"154","severity":1,"message":"166","line":2,"column":37,"nodeType":"156","messageId":"157","endLine":2,"endColumn":44},{"ruleId":"154","severity":1,"message":"203","line":7,"column":10,"nodeType":"156","messageId":"157","endLine":7,"endColumn":16},{"ruleId":"154","severity":1,"message":"204","line":7,"column":18,"nodeType":"156","messageId":"157","endLine":7,"endColumn":30},{"ruleId":"154","severity":1,"message":"205","line":9,"column":8,"nodeType":"156","messageId":"157","endLine":9,"endColumn":12},{"ruleId":"154","severity":1,"message":"184","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":14},{"ruleId":"154","severity":1,"message":"185","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":23},{"ruleId":"173","severity":1,"message":"174","line":12,"column":5,"nodeType":"175","messageId":"176","endLine":14,"endColumn":6},{"ruleId":"177","severity":1,"message":"188","line":39,"column":26,"nodeType":"179","messageId":"180","endLine":39,"endColumn":28},{"ruleId":"177","severity":1,"message":"178","line":61,"column":167,"nodeType":"179","messageId":"180","endLine":61,"endColumn":169},{"ruleId":"206","severity":1,"message":"207","line":73,"column":17,"nodeType":"208","messageId":"209","endLine":73,"endColumn":23},{"ruleId":"177","severity":1,"message":"188","line":102,"column":87,"nodeType":"179","messageId":"180","endLine":102,"endColumn":89},{"ruleId":"177","severity":1,"message":"188","line":112,"column":62,"nodeType":"179","messageId":"180","endLine":112,"endColumn":64},{"ruleId":"154","severity":1,"message":"210","line":2,"column":23,"nodeType":"156","messageId":"157","endLine":2,"endColumn":30},{"ruleId":"154","severity":1,"message":"211","line":2,"column":38,"nodeType":"156","messageId":"157","endLine":2,"endColumn":44},{"ruleId":"194","severity":1,"message":"195","line":38,"column":25,"nodeType":"196","endLine":38,"endColumn":124},{"ruleId":"154","severity":1,"message":"212","line":1,"column":8,"nodeType":"156","messageId":"157","endLine":1,"endColumn":12},{"ruleId":"154","severity":1,"message":"213","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":23},{"ruleId":"154","severity":1,"message":"214","line":2,"column":25,"nodeType":"156","messageId":"157","endLine":2,"endColumn":30},{"ruleId":"154","severity":1,"message":"215","line":2,"column":46,"nodeType":"156","messageId":"157","endLine":2,"endColumn":51},{"ruleId":"154","severity":1,"message":"216","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":17},{"ruleId":"154","severity":1,"message":"217","line":4,"column":10,"nodeType":"156","messageId":"157","endLine":4,"endColumn":16},{"ruleId":"154","severity":1,"message":"218","line":6,"column":10,"nodeType":"156","messageId":"157","endLine":6,"endColumn":17},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'GridColumn' is defined but never used.","'submittedUsername' is assigned a value but never used.","'submittedPassword' is assigned a value but never used.","no-native-reassign",["219"],"no-negated-in-lhs",["220"],"'GridRow' is defined but never used.","'Divider' is defined but never used.","'Input' is defined but never used.","'messages' is assigned a value but never used.","'Container' is defined but never used.","'TextArea' is defined but never used.","'ButtonGroup' is defined but never used.","'Quill' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'quillToolbar' is assigned a value but never used.","'Grid' is defined but never used.","'FaChevronDown' is defined but never used.","'FaHashtag' is defined but never used.","'FaUser' is defined but never used.","Expected '!==' and instead saw '!='.",["219"],["220"],"'List' is defined but never used.","'Checkbox' is defined but never used.","'channel_topic' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Route' is defined but never used.","'Switch' is defined but never used.",["219"],["220"],"'channel_name' is assigned a value but never used.","'channel_desc' is assigned a value but never used.","'FaPlus' is defined but never used.","'FaPlusSquare' is defined but never used.","'Chat' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'Segment' is defined but never used.","'Search' is defined but never used.","'logo' is defined but never used.","'BrowserRouter' is defined but never used.","'Image' is defined but never used.","'Popup' is defined but never used.","'FaPause' is defined but never used.","'BsStar' is defined but never used.","'VscInfo' is defined but never used.","no-global-assign","no-unsafe-negation"]