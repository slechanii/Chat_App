[{"/home/slechani/chat_app/frontend/src/reportWebVitals.js":"1","/home/slechani/chat_app/frontend/src/Pages/Register.js":"2","/home/slechani/chat_app/frontend/src/Components/Chat.js":"3","/home/slechani/chat_app/frontend/src/Components/Chatbox.js":"4","/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js":"5","/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js":"6","/home/slechani/chat_app/frontend/src/Components/Message.js":"7","/home/slechani/chat_app/frontend/src/index.js":"8","/home/slechani/chat_app/frontend/src/Pages/Login.js":"9","/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js":"10","/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js":"11","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js":"12","/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js":"13","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js":"14","/home/slechani/chat_app/frontend/src/Components/UserListModal.js":"15","/home/slechani/chat_app/frontend/src/App.js":"16","/home/slechani/chat_app/frontend/src/Components/ChatHeader.js":"17","/home/slechani/chat_app/frontend/src/Components/DateSeparator.js":"18","/home/slechani/chat_app/frontend/src/Pages/Workspace.js":"19","/home/slechani/chat_app/frontend/src/Components/AddUsersModal.js":"20","/home/slechani/chat_app/frontend/src/Components/WorkspaceName.js":"21","/home/slechani/chat_app/frontend/src/Components/AddUserSearchbar.js":"22","/home/slechani/chat_app/frontend/src/Components/SendMessageModal.js":"23","/home/slechani/chat_app/frontend/src/Components/DirectMessageSearchbar.js":"24","/home/slechani/chat_app/frontend/src/Components/UserProfileMenu.js":"25"},{"size":362,"mtime":1607523001563,"results":"26","hashOfConfig":"27"},{"size":2275,"mtime":1607971464348,"results":"28","hashOfConfig":"27"},{"size":3261,"mtime":1611051035547,"results":"29","hashOfConfig":"27"},{"size":6913,"mtime":1610862334604,"results":"30","hashOfConfig":"27"},{"size":5302,"mtime":1611080848826,"results":"31","hashOfConfig":"27"},{"size":2350,"mtime":1608910683121,"results":"32","hashOfConfig":"27"},{"size":1700,"mtime":1610800311243,"results":"33","hashOfConfig":"27"},{"size":628,"mtime":1608439606892,"results":"34","hashOfConfig":"27"},{"size":2230,"mtime":1607971620643,"results":"35","hashOfConfig":"27"},{"size":3322,"mtime":1611138850045,"results":"36","hashOfConfig":"27"},{"size":4288,"mtime":1611048334207,"results":"37","hashOfConfig":"27"},{"size":3312,"mtime":1611050161906,"results":"38","hashOfConfig":"27"},{"size":5167,"mtime":1610773582275,"results":"39","hashOfConfig":"27"},{"size":4447,"mtime":1611082381430,"results":"40","hashOfConfig":"27"},{"size":2857,"mtime":1610995946804,"results":"41","hashOfConfig":"27"},{"size":615,"mtime":1608439575519,"results":"42","hashOfConfig":"27"},{"size":4802,"mtime":1611052172368,"results":"43","hashOfConfig":"27"},{"size":901,"mtime":1610870081291,"results":"44","hashOfConfig":"27"},{"size":2840,"mtime":1611140919302,"results":"45","hashOfConfig":"27"},{"size":1696,"mtime":1610995686766,"results":"46","hashOfConfig":"27"},{"size":1241,"mtime":1608746465054,"results":"47","hashOfConfig":"27"},{"size":2927,"mtime":1610979323789,"results":"48","hashOfConfig":"27"},{"size":1803,"mtime":1611067824334,"results":"49","hashOfConfig":"27"},{"size":2868,"mtime":1611080783871,"results":"50","hashOfConfig":"27"},{"size":2113,"mtime":1611140855550,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"nhe71c",{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"64"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/slechani/chat_app/frontend/src/reportWebVitals.js",[],["122","123"],"/home/slechani/chat_app/frontend/src/Pages/Register.js",["124","125","126","127"],"import React, { Component } from 'react'\nimport { Button, Grid, GridRow, GridColumn, Form } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport configData from  \"../config.json\";\n\nexport default class Register extends Component {\n\n    state = {\n        username: '', password: '', submittedUsername: '', submittedPassword: '', redirect: false,\n    }\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n        const { username, password } = this.state\n\n        this.setState({ submittedUsername: username, submittedPassword: password })\n        this.registerAccount(username, password)\n    }\n\n    registerAccount = (username, password) => {\n        axios.post(configData.SERVER_URL + \"users/\", { username: username, password: password })\n            .then(res => {\n                localStorage.setItem(\"username\", username)\n                this.setState({redirect:true})\n            })\n            .catch(error => {\n                alert(\"Error : \" + error)\n            })\n    }\n\n    render() {\n        const { username, password, submittedUsername, submittedPassword } = this.state\n        if (this.state.redirect === true){\n            return <Redirect to=\"/workspace\" />\n        }\n        return (\n            <Grid verticalAlign=\"middle\" columns={4} >\n                <GridRow verticalAlign=\"middle\" centered>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Input\n                                placeholder='Username'\n                                name='username'\n                                value={username}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Input\n                                placeholder='Password'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button content='Register' />\n                        </Form.Group>\n                    </Form>\n\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n",["128","129"],"/home/slechani/chat_app/frontend/src/Components/Chat.js",["130","131","132","133"],"/home/slechani/chat_app/frontend/src/Components/Chatbox.js",["134","135","136","137","138","139","140","141","142","143","144","145","146"],"\n\nimport React, { Component } from 'react'\nimport { Grid, Input, GridRow, Container, TextArea, Button, ButtonGroup, Icon } from 'semantic-ui-react'\nimport Axios from 'axios';\nimport configData from  \"../config.json\";\nimport 'react-quill/dist/quill.snow.css';\nimport ReactQuill, {Quill} from 'react-quill';\n\n\nconst CustomButton = () => <Icon name=\"send\"></Icon>\n// const CustomToolbar = () => (\n//     <div id=\"toolbar\">\n//       {/* \"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\", {insertStar: this.insertStar} */}\n//       <button className=\"ql-bold\"></button>\n//       <button className=\"ql-italic\"></button>\n//       <button className=\"ql-strike\"></button>    \n//       <button className=\"ql-underline\"></button>    \n//       <button className=\"ql-blockquote\"></button>        \n//       <button className=\"ql-send-message\" onClick={this.props.sendMessage}>\n//         <CustomButton />\n//       </button>\n//     </div>\n//   )\n\n  class CustomToolbar extends Component { \n\n    constructor(props){\n        super(props)\n    }\n      render() {\n          \n        return(\n    <div id=\"toolbar\">\n      {/* \"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\", {insertStar: this.insertStar} */}\n      <button className=\"ql-bold\"></button>\n      <button className=\"ql-italic\"></button>\n      <button className=\"ql-strike\"></button>    \n      <button className=\"ql-underline\"></button>    \n      <button className=\"ql-blockquote\"></button>        \n      <button className=\"ql-send-message\" onClick={() => {this.props.sendMessage(false)}}>\n        <CustomButton />\n      </button>\n    </div>\n  )\n      }\n  }\n\n  function insertStar()  {\n    alert(\"star\")\n}\n\nexport default class Chatbox extends Component {\n\n    constructor(props)\n    {\n        super(props);\n    }\n    state = {\n        messageContent : \"\",       \n        oldValue: \"\",\n        value: \"\",\n    }\n\n\n\n    onChangeMessage = (html) => {\n        this.setState({oldValue: this.state.messageContent, messageContent: html})\n    }\n\n    handleKey = (event) => {\n        if (event.key == \"Enter\" && !event.shiftKey)\n        {            \n            this.setState({messageContent: \"\"})\n            event.preventDefault();\n            this.sendMessage(true)\n            event.stopPropagation();\n            return false\n        }\n    }\n\n    cleanMessage = (message) => {\n        message = message.replace(/<p><\\/\\p>/g, \"\")\n        message = message.replace(/<p><br><\\/p>/g, \"\")\n        message = message.replace(/<br>/g, \"\")\n        return message\n    }\n\n    sendMessage = (from_enter_key) => {\n   \n        let message = \"\"\n        if (from_enter_key)\n            message = this.state.oldValue\n        else\n            message = this.state.messageContent\n        let message_to_send = {       \n            content:  this.cleanMessage(message),\n            sender_id: localStorage.getItem(\"user_id\"),\n            destination_id: window.location.pathname.split('/')[2], \n        }\n      Axios.post(configData.SERVER_URL + \"messages/\", message_to_send)\n           .then((res) => {\n               this.props.refreshMessages()\n               this.setState({messageContent:\"\"})\n               this.setState({oldValue:\"\"})\n           })\n           .catch((err) => {\n               console.log(err)\n           })\n    }\n\n\n    render() {\n        const {value, setValue} = this.state\n        const quillToolbar = {\n            history: {\n                delay: 1000,\n                maxStack: 100,\n                userOnly: false\n              },\n            toolbar: [\"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\", {insertStar: this.insertStar}\n        ],\n\n\n            clipboard: {\n                matchVisual: false\n            },\n   \n          };\n        //   alert(\"name in box : \" + this.props.channel)\n        return (\n            \n            <Grid.Row className=\"chatbox-container\">\n            \n            {/* <ReactQuill value={this.state.messageContent} onKeyDown={(e) => {this.handleKey(e)}}  ref={(el) => {this.reactQuillRef = el}} className=\"chatbox-wrapper\" modules={quillToolbar} theme=\"snow\" onChange={this.onChangeMessage} > */}\n            <ReactQuill key={this.props.channelName} placeholder={\"Write a message to #\" + this.props.channelName} value={this.state.messageContent} onKeyDown={(e) => {this.handleKey(e)}}  ref={(el) => {this.reactQuillRef = el}} className=\"chatbox-wrapper\" modules={Chatbox.modules} theme=\"snow\" onChange={this.onChangeMessage} >\n              {/* <div className=\"chatbox-input\"/> */}\n              </ReactQuill> \n              <CustomToolbar sendMessage={this.sendMessage}></CustomToolbar>\n  \n                {/* <Grid className=\"chatbox\">\n                    <Grid.Row className=\"chatbox-textarea-row\">\n                    <form className=\"unstyled\" id=\"textarea-chat\">\n                        <TextArea  name=\"messageContent\" onChange={this.handleChange} placeholder=\"Send a message to #channel\" className=\"chatbox-input\"></TextArea>\n                    </form>\n                    </Grid.Row>\n                    <GridRow className=\"chatbox-formatting-row\">\n                        <Button.Group>\n                            <Button icon>\n                                <Icon name='bold' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='italic' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='strikethrough' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='code' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='ordered list' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='bulleted list' />\n                            </Button>\n                            <Button icon>\n                                <Icon name='quote left' />\n                            </Button>\n                        </Button.Group>\n                    \n                            <Button onClick={this.sendMessage} icon>\n                                <Icon name='send' />\n                            </Button>\n                       \n\n\n                    </GridRow>\n                </Grid> */}\n\n            </Grid.Row>\n\n\n\n        )\n    }\n}\n\nChatbox.modules = {\n    toolbar: {\n      container: \"#toolbar\",\n      handlers: {\n        \"insertStar\": insertStar,\n      }\n    }\n  }\n  \n  /*\n   * Quill editor formats\n   * See http://quilljs.com/docs/formats/\n   */\n  Chatbox.formats = [\n    \"bold\", \"italic\", \"strike\", \"underline\", \"blockquote\", { list: \"bullet\" }, {'list': 'ordered'}, \"link\"\n  ]\n",["147","148"],"/home/slechani/chat_app/frontend/src/Components/MessagesMenu.js",["149","150","151","152","153","154"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaUser, FaUserAlt, FaPlus } from 'react-icons/fa';\nimport { Redirect } from \"react-router-dom\";\nimport SendMessageModal from './SendMessageModal';\n\nexport default class MessagesMenu extends Component {\n    state = {\n        activeIndex: 0,\n        hover: false,\n        channels: [],\n        profile_id: null,\n        redirect: false,\n        channel_to_load: null,\n        display_channels: false,\n    };\n\n    loadChannel = (channel_id) => {\n        const url = \"/workspace/\" + channel_id\n        this.setState({ redirect: true })\n        this.setState({ channel_to_load: url })\n    }\n\n    getActiveChannel = () => {\n        let url = window.location.pathname\n        url = url.split('/')[2]\n        return (parseInt(url))\n    }\n\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({hover: mouse_status})\n    }\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        const channels = this.props.channels.map((data, idx) => {\n            var active_channel = false\n            if (data.id === this.getActiveChannel()) {\n                active_channel = true\n            }\n            // Display channel if rendering fav list OR Display if rendering regular channels and channel isn't in fav list  \n                 return (\n  \n                    <List.Item onClick={() => { this.loadChannel(data.id) }} className={`workspace-submenu-row-item ${active_channel ? \"active-item\" : \"\"}`} >\n                        <List.Icon > <FaHashtag></FaHashtag></List.Icon>\n                        <List.Content className=\"channel-title-menu\">\n                            {data.name}\n                        </List.Content>\n                    </List.Item>\n                )\n        })\n        if (this.state.redirect === true) {\n            this.setState({ redirect: false })\n            this.setState({ channel_to_load: null })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={this.state.channel_to_load} />\n        }\n        const { activeIndex } = this.state\n        return (\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                <GridColumn className=\"no-padding\" width=\"16\">\n                    <Accordion>\n                        <Accordion.Title  onMouseEnter={() => {this.handleHover(true)}} onMouseLeave={() => {this.handleHover(false)}} className=\"workspace-submenu-row\"\n                            active={activeIndex === 0}\n                            index={0}\n                            onClick={this.handleClick}\n                           \n                        >\n                                <Icon className=\"white\" color=\"white\" name=\"dropdown\"></Icon>\n                            <span className=\"bold white\">Direct messages</span>\n\n                            {/* Start chat hover icon */}\n                            { this.state.hover === true &&\n                            <span className=\"menu-side-icon-container\">\n                                <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                            </span>\n                            }\n                        </Accordion.Title>\n                        <Accordion.Content active={activeIndex === 0}>\n                            <List className=\"collapsible-menu-list\">\n                            {channels}\n                                {/* <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>admin</span>\n                                        <span>you</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>John</span>\n                                    </List.Content>\n                                </List.Item>\n                                <List.Item className=\"workspace-submenu-row-item\">\n                                    <List.Icon > <FaUserAlt></FaUserAlt></List.Icon>\n                                    <List.Content className=\"channel-title-menu\">\n                                        <span>Jane</span>\n                                    </List.Content>\n                                </List.Item> */}\n                                <SendMessageModal reload={this.props.refreshChannels}></SendMessageModal>\n\n                            </List>\n                        </Accordion.Content>\n                    </Accordion>\n                </GridColumn>\n            </GridRow>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChangeTopic.js",["155","156","157","158"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class ChangeTopic extends Component {\n  \n    state = {\n        open: false,\n        channel_topic: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    setTopic = () => {\n        const req_body = {\n            topic: this.state.channel_topic,            \n        }\n\n       Axios.patch(configData.SERVER_URL + \"channels/\" + this.props.channelId + \"/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_topic} = this.state \n        return (\n            <Modal className=\"\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"mini\"\n                trigger={<Button id=\"chat-channel-topic\" className=\"unstyled\">{this.props.topic}</Button>}\n            >\n                <Modal.Header className=\"create-chan-header\">Edit channel topic</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Form class=\"\">\n                        <Form.Field required>\n                        \n                        <Form.Input\n                                placeholder='Channel topic'\n                                name='channel_topic'\n                                label=\"Channel topic\"\n                                onChange={this.handleChange}                             \n                            />\n                        </Form.Field>\n                       \n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.setTopic}>\n                    Set Topic\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/Message.js",["159","160","161"],"import React, { Component } from 'react'\nimport { Grid } from 'semantic-ui-react';\n\nexport default class Message extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n\n    }\n\n\n    render() {\n        let local_date = new Date(this.props.date) \n        let time = local_date.toLocaleTimeString(navigator.language, {hour: '2-digit', minute:'2-digit'})\n\n        return (\n\n            <div className=\"message-row\">\n\n                <div className=\"message-left-col\">\n                    {this.props.showUsername === false &&\n                        <span className=\"chat-message-side-time\">{time}</span>\n                    }\n                    {this.props.showUsername === true &&\n                        <img id=\"profile-img-chat-message\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48\"></img>\n\n                    }\n                </div>\n                <div className=\"message-right-col\">\n\n                    {this.props.showUsername === true &&\n                        <div className=\"chat-message-header\">\n                            <span className=\"chat-message-username\">\n                                {this.props.username}\n                            </span>\n                            <span className=\"chat-message-time\">\n                                {time} \n                        </span>\n                        </div>\n                    }\n                    <p className=\"chat-message\">\n                        {/* {this.props.message} */}\n                        <span dangerouslySetInnerHTML={{ __html: this.props.message }}></span>\n                    </p>\n                </div>\n            </div>\n\n        )\n    }\n}\n",["162","163"],"/home/slechani/chat_app/frontend/src/index.js",["164","165"],"import '../node_modules/semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/home/slechani/chat_app/frontend/src/Pages/Login.js",["166","167","168","169"],"import React, { Component } from 'react'\nimport { Button, Grid, GridRow, GridColumn, Form } from 'semantic-ui-react'\nimport axios from 'axios';\nimport { Redirect } from \"react-router-dom\";\nimport configData from  \"../config.json\";\n\nexport default class Register extends Component {\n\n    state = { username: '', password: '', submittedUsername: '', submittedPassword: '', redirect: false,}\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    handleSubmit = () => {\n        const { username, password } = this.state\n\n        this.setState({ submittedUsername: username, submittedPassword: password })\n        this.loginAccount(username, password)        \n    }\n\n    loginAccount = (username, password) => {\n        axios.post(configData.SERVER_URL + \"token/\", {username:username, password:password})\n        .then(res => {\n            localStorage.setItem(\"username\", username)\n            this.setState({redirect:true})\n        })\n        .catch(error => {\n            alert(\"Error : \" + error)\n        })\n    }\n\n    render() {\n        if (this.state.redirect === true){\n            return <Redirect to=\"/workspace\" />\n        }\n        const { username, password, submittedUsername, submittedPassword } = this.state \n        return (\n            <Grid verticalAlign=\"middle\" columns={4} >\n                <GridRow verticalAlign=\"middle\" centered>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Input\n                                placeholder='Username'\n                                name='username'\n                                value={username}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Input\n                                placeholder='Password'\n                                name='password'\n                                value={password}\n                                onChange={this.handleChange}\n                            />\n                            <Form.Button content='Login' />\n                        </Form.Group>\n                    </Form>\n\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/MessageDisplay.js",["170","171","172","173","174","175"],"/home/slechani/chat_app/frontend/src/Components/AddChannelModal.js",["176","177"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Form, Checkbox, Grid } from 'semantic-ui-react';\nimport configData from  \"../config.json\";\nimport Axios from 'axios';\n\nexport default class AddChannelModal extends Component {\n\n    state = {\n        open: false,\n        channel_name: \"\",\n        channel_desc: \"\",\n    }\n\n\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    createChannel = () => {\n        const req_body = {\n            name: this.state.channel_name,\n            description: this.state.channel_desc,\n            channel_member: [localStorage.getItem(\"user_id\")],\n            channel_admin: [localStorage.getItem(\"user_id\")],\n            star_channels: [],    \n        }\n\n       Axios.post(configData.SERVER_URL + \"channels/\", req_body)\n            .then((res) => {\n                this.props.refreshChannels();\n                this.setState({open: false})\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n\n    }\n\n    render() {\n        const { channel_name, channel_desc} = this.state \n        return (\n\n\n            <Modal className=\"create-channel-modal\"\n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                trigger={<List.Content className=\"channel-title-menu\">Add Channels</List.Content>}\n            >\n                <Modal.Header className=\"create-chan-header\">Create a Channel</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <Modal.Description className=\"modal-desc\">\n                        <p className=\"secondary-text\">\n                            Channels are where your team communicates. They’re best when organized around a topic — #marketing, for example.\n                    </p>\n                    </Modal.Description>\n\n                    <Form class=\"\">\n                        <Form.Field required>\n                        <Form.Input\n                                placeholder='#channel_name'\n                                name='channel_name'\n                                label=\"Name\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                        <Form.Input\n                                placeholder=\"What's this channel about ?\"\n                                name='channel_desc'\n                                label=\"Description (Optional)\"\n                                onChange={this.handleChange}\n                            />\n                        </Form.Field>\n                        <Form.Field>\n                            <Grid>\n                                <Grid.Row columns=\"16\">\n                                    <Grid.Column width=\"13\">\n                                        <Modal.Header className=\"bold\">\n                                            Make private\n                                    </Modal.Header>\n                                        <Modal.Description>\n                                            <p className=\"secondary-text\">\n                                            When a channel is set to private, it can only be viewed or joined by invitation.\n                                            </p>\n                                 </Modal.Description>\n\n                                    </Grid.Column>\n                                    <Grid.Column verticalAlign=\"middle\" width=\"3\">\n                                        <Checkbox  toggle />\n                                    </Grid.Column>\n                                </Grid.Row>\n                            </Grid>\n\n                        </Form.Field>\n\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Cancel\n              </Button>\n                <Button positive onClick={this.createChannel}>\n                    Create Channel\n                </Button>\n                </Modal.Actions>\n            </Modal>\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/WorkspaceMenu.js",["178","179","180","181"],"/home/slechani/chat_app/frontend/src/Components/ChannelsMenu.js",["182","183","184","185","186","187","188","189"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Accordion, List, Icon, } from 'semantic-ui-react';\nimport { FaChevronDown, FaHashtag, FaPlusSquare, FaPlus } from 'react-icons/fa';\nimport { Redirect } from \"react-router-dom\";\nimport AddChannelModal from './AddChannelModal.js';\n// import { ModalExampleModal } from \"../Components/AddChannelModal\";\n\n\n\nexport default class ChannelsMenu extends Component {\n\n    constructor(props) {\n        super(props)\n    }\n\n    state = {\n        activeIndex: 0,\n        hover: false,\n        channels: [],\n        profile_id: null,\n        redirect: false,\n        channel_to_load: null,\n        display_channels: false,\n    };\n\n    loadChannel = (channel_id) => {\n        const url = \"/workspace/\" + channel_id\n        this.setState({ redirect: true })\n        this.setState({ channel_to_load: url })\n    }\n\n    getActiveChannel = () => {\n        let url = window.location.pathname\n        url = url.split('/')[2]\n        return (parseInt(url))\n    }\n\n    handleHover = (mouse_status) => {\n        if (mouse_status != this.state.hover)\n            this.setState({ hover: mouse_status })\n\n    }\n\n    handleClick = (e, titleProps) => {\n        const { index } = titleProps\n        const { activeIndex } = this.state\n        const newIndex = activeIndex === index ? -1 : index\n\n        this.setState({ activeIndex: newIndex })\n    }\n\n    render() {\n        let display_channels = false\n        const { activeIndex } = this.state\n        const channels = this.props.channels.map((data, idx) => {\n            var active_channel = false\n            if (data.id === this.getActiveChannel()) {\n                active_channel = true\n            }\n            // Display channel if rendering fav list OR Display if rendering regular channels and channel isn't in fav list  \n            if (this.props.starChannels === true || (this.props.starChannels === false && this.props.starredChannels.find(function (el) { return el.id === data.id }) == undefined)) {\n                return (\n  \n                    <List.Item onClick={() => { this.loadChannel(data.id) }} className={`workspace-submenu-row-item ${active_channel ? \"active-item\" : \"\"}`} >\n                        <List.Icon > <FaHashtag></FaHashtag></List.Icon>\n                        <List.Content className=\"channel-title-menu\">\n                            {data.name}\n                        </List.Content>\n                    </List.Item>\n                )\n            }\n            else\n                return\n        })\n\n\n\n        if (this.state.redirect === true) {\n            this.setState({ redirect: false })\n            this.setState({ channel_to_load: null })\n            this.props.changeState(\"refreshChat\", true)\n            return <Redirect to={this.state.channel_to_load} />\n        }\n        if (this.props.channels.length > 0 || this.props.starChannels === false)\n            display_channels = true\n\n        return (\n\n\n            <GridRow className=\"side-menu-item\" columns=\"16\"  >\n                {display_channels ?\n                    <GridColumn className=\"no-padding\" width=\"16\">\n                        <Accordion>\n                            <Accordion.Title onMouseEnter={() => { this.handleHover(true) }} onMouseLeave={() => { this.handleHover(false) }} className=\"workspace-submenu-row\"\n                                active={activeIndex === 0}\n                                index={0}\n                                onClick={this.handleClick}\n                            >\n                                <Icon color=\"white\" name=\"dropdown\"></Icon>\n                                <span className=\"white bold\">{this.props.title}</span>\n                                {/* Add Channel hover icon */}\n                                {this.state.hover === true && this.props.starChannels != true &&\n                                    <span className=\"menu-side-icon-container\">\n                                        <FaPlus className=\"menu-side-icon\" color=\"white\" size=\"0.9em\"></FaPlus>\n                                    </span>\n                                }\n                            </Accordion.Title>\n                            <Accordion.Content active={activeIndex === 0}>\n                                <List className=\"collapsible-menu-list\">\n\n                                    {channels}\n                                    {this.props.starChannels != true &&\n                                        <List.Item className=\"workspace-submenu-row-item\">\n                                            <List.Icon >       <FaPlusSquare ></FaPlusSquare></List.Icon>\n\n                                            {/* Add channels */}\n\n                                            <AddChannelModal refreshChannels={this.props.refreshChannels}></AddChannelModal>\n\n\n                                        </List.Item>\n                                    }\n                                </List>\n                            </Accordion.Content>\n                        </Accordion>\n                    </GridColumn> :\n                    <span></span>\n                }\n            </GridRow>\n\n\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/ChannelMenu.js",["190","191"],"/home/slechani/chat_app/frontend/src/Components/UserListModal.js",["192","193"],"import React, { Component } from 'react'\nimport { Modal, List, Button, Image, Search } from 'semantic-ui-react';\nimport AddUsersModal from './AddUsersModal';\n\n\nexport default class UserListModal extends Component {\n    state = {\n        open: false,\n    }\n\n    setOpen = (open) => {\n        this.setState({ open: open })\n    }\n\n    reload = () => {\n        this.props.reload()\n        this.setOpen(false)\n\n    }\n\n    render() {\n        let users = this.props && this.props.usersList.length > 0 ? \n        this.props.usersList.map((user, index) => {                   \n                return (\n                    <List.Item>\n                        <Image className=\"user-list-picture\"  src='https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-48' />\n                        <List.Content>\n                           <List.Header> <p className=\"user-list-name-container\">\n                            <span className=\"user-list-name\">{user.username}</span>\n                            </p>\n                            </List.Header>\n                        </List.Content>\n                    </List.Item>\n                ) \n            }) : <span></span>\n        \n        return (\n            <Modal \n                onClose={() => this.setOpen(false)}\n                onOpen={() => this.setOpen(true)}\n                open={this.state.open}\n                size=\"tiny\"\n                trigger={<button className=\"unstyled user-count-channel-btn\">\n                    <div class=\"double-button-half-left\">\n                        <img id=\"profile-img-chat\" src=\"https://ca.slack-edge.com/T01GTD2333N-U01GJ5P688M-gb0c7d943951-24\"></img>\n                    </div>\n                    <div className=\"double-button-half-right user-count-channel\">\n                        <div className=\"double-button-count\">\n                            {this.props.userList.length}\n                        </div>\n                    </div></button>}\n            >\n                <Modal.Header className=\"create-chan-header\">{this.props.userList.length} members in #{this.props.channelName}</Modal.Header>\n                <Modal.Content className=\"create-chan-content\">\n                    <button className=\"unstyled add-people-modal-btn\">\n              \n                    <AddUsersModal addPeople={true} channelId={this.props.channelId} reload={this.reload}  channelName={this.props.channelName}></AddUsersModal>\n                       \n                    </button>\n                    <List selection verticalAlign='middle' className=\"user-list\">\n                        {users}\n                    </List>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button onClick={() => this.setOpen(false)}>\n                        Back\n          </Button>\n                </Modal.Actions>\n            </Modal>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/App.js",["194","195"],"import logo from './logo.svg';\nimport './App.css';\nimport '../node_modules/semantic-ui-css/semantic.min.css'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Login from './Pages/Login'; \nimport Register from './Pages/Register';\nimport Workspace from './Pages/Workspace';\nfunction App() {\n    return (\n        <main>\n            <Switch>\n                <Route path=\"/register\" component={Register} />\n                <Route path=\"/login\" component={Login} />\n                <Route path=\"/workspace\" component={Workspace} />\n            </Switch>\n        </main>\n    )\n}\n\nexport default App;\n",["196","197"],"/home/slechani/chat_app/frontend/src/Components/ChatHeader.js",["198","199","200"],"/home/slechani/chat_app/frontend/src/Components/DateSeparator.js",["201","202","203"],"import React, { Component } from 'react'\nimport { Divider } from 'semantic-ui-react';\nimport classNames from \"classnames\"\n\nexport default class DateSeparator extends Component {\n    render() {\n        let wrapper_classes = classNames(\n            'date-separator-wrapper',\n            {\n                'yesterday-date': this.props.date === \"Yesterday\",\n                'today-date': this.props.date === \"Today\",\n                'other-date': this.props.date != \"Yesterday\" && this.props.date != \"Today\",\n            }\n        );\n        return (\n            <div className=\"date-separator-container\">\n         \n                    <div className=\"divider-date-separator\"></div>\n                    <div className={wrapper_classes}>\n                        <span className=\"date-separator-date\">{this.props.date}</span>\n                    </div>\n                \n            </div>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Pages/Workspace.js",[],"/home/slechani/chat_app/frontend/src/Components/AddUsersModal.js",["204","205","206"],"/home/slechani/chat_app/frontend/src/Components/WorkspaceName.js",["207","208","209","210"],"import React, { Component } from 'react'\nimport { Grid, GridRow, GridColumn, Icon, Button } from 'semantic-ui-react';\nimport { FaChevronDown, FaPenSquare } from 'react-icons/fa';\nimport { BsPencilSquare } from 'react-icons/bs'\n\n\nexport default class WorkspaceName extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <Grid verticalAlign='middle' className=\"workspace-name-grid\" >\n                <GridRow  className=\"nopadding-nomargin\" columns=\"16\">\n                    <GridColumn className=\"nopadding-nomargin\" width=\"12\" >\n                        <div className=\"bold workspace-name \">{this.props.title} <FaChevronDown size=\"0.75em\"></FaChevronDown></div>\n                    </GridColumn>\n                    <GridColumn width=\"4\" >\n\n\n                        {/* <Button circular className=\"new-message-btn\"> */}\n                        <Icon id=\"write-messsage-icon\" circular color=\"black\"  size=\"em\" name=\"pencil square\"></Icon>\n                            {/* <BsPencilSquare color=\"#3F0E40\" size=\"1.10em\"></BsPencilSquare> */}\n                        {/* </Button> */}\n\n                    </GridColumn>\n                </GridRow>\n            </Grid>\n        )\n    }\n}\n","/home/slechani/chat_app/frontend/src/Components/AddUserSearchbar.js",["211","212","213"],"import _ from 'lodash'\nimport React from 'react'\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react'\nimport Axios from 'axios';\nimport configData from \"../config.json\";\n\nconst initialState = {\n  loading: false,\n  results: [],\n  value: '',\n}\n\nvar source = []\n\nfunction getNonSubscribedUsers(channel_id){\n    Axios.post(configData.SERVER_URL + \"getNonChannelMembers/\", {channel_id: channel_id})\n         .then((res) => {\n            source = res.data\n         })\n         .catch((err) => {\n             console.log(err)\n         })\n}\n\nfunction addUserToChannel(user_id, channel_id, reload){\n    Axios.post(configData.SERVER_URL + \"addUserToChannel/\", {channel_id: channel_id, profile_id: user_id})\n    .then((res) => {\n      reload();\n    })\n    .catch((err) => {\n        console.log(err)\n    })\n}\n\nfunction exampleReducer(state, action) {\n  switch (action.type) {\n    case 'CLEAN_QUERY':\n      return initialState\n    case 'START_SEARCH':\n      return { ...state, loading: true, value: action.query }\n    case 'FINISH_SEARCH':\n      return { ...state, loading: false, results: action.results }\n    case 'UPDATE_SELECTION':\n      return { ...state, value: action.selection }\n\n    default:\n      throw new Error()\n  }\n}\n\nfunction AddUserSearchbar(props) {\n    getNonSubscribedUsers(props.channelId)\n    const renderer = ({username, user_id }) => (\n        <div className=\"searchbar-add-users-results\">               \n            <p className=\"searchbar-add-users-results\" onClick={() =>{addUserToChannel(user_id, props.channelId, props.reload)} }>{username}</p>               \n        </div>\n    );\n\n\n    // var source = getNonSubscribedUsers(props.channelId)\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState)\n  const { loading, results, value } = state\n\n  const timeoutRef = React.useRef()\n  const handleSearchChange = React.useCallback((e, data) => {\n    clearTimeout(timeoutRef.current)\n    dispatch({ type: 'START_SEARCH', query: data.value })\n\n    timeoutRef.current = setTimeout(() => {\n      if (data.value.length === 0) {\n        dispatch({ type: 'CLEAN_QUERY' })\n        return\n      }\n\n      const re = new RegExp(_.escapeRegExp(data.value), 'i')\n      const isMatch = (result) => re.test(result.username)\n\n      dispatch({\n        type: 'FINISH_SEARCH',\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }, [])\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current)\n    }\n  }, [])\n//   alert(JSON.stringify(results))\n  return (\n\n        <Search\n          loading={loading}\n          onResultSelect={(e, data) =>\n            dispatch({ type: 'UPDATE_SELECTION', selection: data.result.username })\n          }\n          onSearchChange={handleSearchChange}\n          results={results}\n          resultRenderer={renderer}\n          value={value}\n          className=\"searchbar-add-users\"\n        />\n  )\n}\n\nexport default AddUserSearchbar\n","/home/slechani/chat_app/frontend/src/Components/SendMessageModal.js",["214"],"/home/slechani/chat_app/frontend/src/Components/DirectMessageSearchbar.js",["215","216","217"],"import _ from 'lodash'\nimport React from 'react'\nimport { Search, Grid, Header, Segment } from 'semantic-ui-react'\nimport Axios from 'axios';\nimport configData from \"../config.json\";\n\nconst initialState = {\n  loading: false,\n  results: [],\n  value: '',\n}\n\nvar source = []\n\nfunction getAllUsers(){\n    Axios.get(configData.SERVER_URL + \"getUsers/\")\n         .then((res) => {\n            source = res.data\n         })\n         .catch((err) => {\n             console.log(err)\n         })\n}\n\nfunction addUserToChannel(user_id, reload){\n    Axios.post(configData.SERVER_URL + \"startChat/\", {emitter_profile_id: localStorage.getItem(\"user_id\"), receiver_profile_id: user_id})\n    .then((res) => {\n      reload();\n    })\n    .catch((err) => {\n        console.log(err)\n    })\n}\n\nfunction exampleReducer(state, action) {\n  switch (action.type) {\n    case 'CLEAN_QUERY':\n      return initialState\n    case 'START_SEARCH':\n      return { ...state, loading: true, value: action.query }\n    case 'FINISH_SEARCH':\n      return { ...state, loading: false, results: action.results }\n    case 'UPDATE_SELECTION':\n      return { ...state, value: action.selection }\n\n    default:\n      throw new Error()\n  }\n}\n\nfunction DirectMessageSearchbar(props) {\n    getAllUsers()\n    const renderer = ({username, user_id }) => (\n        <div className=\"searchbar-add-users-results\">               \n            <p className=\"searchbar-add-users-results\" onClick={() =>{addUserToChannel(user_id, props.reload)} }>{username}</p>               \n        </div>\n    );\n\n\n    // var source = getNonSubscribedUsers(props.channelId)\n  const [state, dispatch] = React.useReducer(exampleReducer, initialState)\n  const { loading, results, value } = state\n\n  const timeoutRef = React.useRef()\n  const handleSearchChange = React.useCallback((e, data) => {\n    clearTimeout(timeoutRef.current)\n    dispatch({ type: 'START_SEARCH', query: data.value })\n\n    timeoutRef.current = setTimeout(() => {\n      if (data.value.length === 0) {\n        dispatch({ type: 'CLEAN_QUERY' })\n        return\n      }\n\n      const re = new RegExp(_.escapeRegExp(data.value), 'i')\n      const isMatch = (result) => re.test(result.username)\n\n      dispatch({\n        type: 'FINISH_SEARCH',\n        results: _.filter(source, isMatch),\n      })\n    }, 300)\n  }, [])\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(timeoutRef.current)\n    }\n  }, [])\n//   alert(JSON.stringify(results))\n  return (\n\n        <Search\n          loading={loading}\n          onResultSelect={(e, data) =>\n            dispatch({ type: 'UPDATE_SELECTION', selection: data.result.username })\n          }\n          onSearchChange={handleSearchChange}\n          results={results}\n          resultRenderer={renderer}\n          value={value}\n          \n          className=\"searchbar-add-users\"\n        />\n  )\n}\n\nexport default DirectMessageSearchbar\n","/home/slechani/chat_app/frontend/src/Components/UserProfileMenu.js",["218","219","220","221","222"],{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":16},{"ruleId":"227","severity":1,"message":"231","line":2,"column":33,"nodeType":"229","messageId":"230","endLine":2,"endColumn":43},{"ruleId":"227","severity":1,"message":"232","line":34,"column":37,"nodeType":"229","messageId":"230","endLine":34,"endColumn":54},{"ruleId":"227","severity":1,"message":"233","line":34,"column":56,"nodeType":"229","messageId":"230","endLine":34,"endColumn":73},{"ruleId":"223","replacedBy":"234"},{"ruleId":"225","replacedBy":"235"},{"ruleId":"227","severity":1,"message":"236","line":2,"column":16,"nodeType":"229","messageId":"230","endLine":2,"endColumn":23},{"ruleId":"227","severity":1,"message":"237","line":2,"column":37,"nodeType":"229","messageId":"230","endLine":2,"endColumn":44},{"ruleId":"227","severity":1,"message":"238","line":2,"column":46,"nodeType":"229","messageId":"230","endLine":2,"endColumn":51},{"ruleId":"227","severity":1,"message":"239","line":57,"column":13,"nodeType":"229","messageId":"230","endLine":57,"endColumn":21},{"ruleId":"227","severity":1,"message":"238","line":4,"column":16,"nodeType":"229","messageId":"230","endLine":4,"endColumn":21},{"ruleId":"227","severity":1,"message":"236","line":4,"column":23,"nodeType":"229","messageId":"230","endLine":4,"endColumn":30},{"ruleId":"227","severity":1,"message":"240","line":4,"column":32,"nodeType":"229","messageId":"230","endLine":4,"endColumn":41},{"ruleId":"227","severity":1,"message":"241","line":4,"column":43,"nodeType":"229","messageId":"230","endLine":4,"endColumn":51},{"ruleId":"227","severity":1,"message":"228","line":4,"column":53,"nodeType":"229","messageId":"230","endLine":4,"endColumn":59},{"ruleId":"227","severity":1,"message":"242","line":4,"column":61,"nodeType":"229","messageId":"230","endLine":4,"endColumn":72},{"ruleId":"227","severity":1,"message":"243","line":8,"column":21,"nodeType":"229","messageId":"230","endLine":8,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":28,"column":5,"nodeType":"246","messageId":"247","endLine":30,"endColumn":6},{"ruleId":"244","severity":1,"message":"245","line":55,"column":5,"nodeType":"246","messageId":"247","endLine":58,"endColumn":6},{"ruleId":"248","severity":1,"message":"249","line":72,"column":23,"nodeType":"250","messageId":"251","endLine":72,"endColumn":25},{"ruleId":"227","severity":1,"message":"252","line":114,"column":16,"nodeType":"229","messageId":"230","endLine":114,"endColumn":21},{"ruleId":"227","severity":1,"message":"253","line":114,"column":23,"nodeType":"229","messageId":"230","endLine":114,"endColumn":31},{"ruleId":"227","severity":1,"message":"254","line":115,"column":15,"nodeType":"229","messageId":"230","endLine":115,"endColumn":27},{"ruleId":"223","replacedBy":"255"},{"ruleId":"225","replacedBy":"256"},{"ruleId":"227","severity":1,"message":"257","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":14},{"ruleId":"227","severity":1,"message":"258","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":23},{"ruleId":"227","severity":1,"message":"259","line":3,"column":36,"nodeType":"229","messageId":"230","endLine":3,"endColumn":48},{"ruleId":"227","severity":1,"message":"260","line":3,"column":50,"nodeType":"229","messageId":"230","endLine":3,"endColumn":56},{"ruleId":"227","severity":1,"message":"261","line":3,"column":58,"nodeType":"229","messageId":"230","endLine":3,"endColumn":67},{"ruleId":"248","severity":1,"message":"262","line":32,"column":26,"nodeType":"250","messageId":"251","endLine":32,"endColumn":28},{"ruleId":"227","severity":1,"message":"263","line":2,"column":17,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"264","line":2,"column":37,"nodeType":"229","messageId":"230","endLine":2,"endColumn":45},{"ruleId":"227","severity":1,"message":"257","line":2,"column":47,"nodeType":"229","messageId":"230","endLine":2,"endColumn":51},{"ruleId":"227","severity":1,"message":"265","line":37,"column":17,"nodeType":"229","messageId":"230","endLine":37,"endColumn":30},{"ruleId":"227","severity":1,"message":"257","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":14},{"ruleId":"244","severity":1,"message":"245","line":5,"column":5,"nodeType":"246","messageId":"247","endLine":7,"endColumn":6},{"ruleId":"266","severity":1,"message":"267","line":27,"column":25,"nodeType":"268","endLine":27,"endColumn":132},{"ruleId":"223","replacedBy":"269"},{"ruleId":"225","replacedBy":"270"},{"ruleId":"227","severity":1,"message":"271","line":8,"column":25,"nodeType":"229","messageId":"230","endLine":8,"endColumn":30},{"ruleId":"227","severity":1,"message":"272","line":8,"column":32,"nodeType":"229","messageId":"230","endLine":8,"endColumn":38},{"ruleId":"227","severity":1,"message":"228","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":16},{"ruleId":"227","severity":1,"message":"231","line":2,"column":33,"nodeType":"229","messageId":"230","endLine":2,"endColumn":43},{"ruleId":"227","severity":1,"message":"232","line":35,"column":37,"nodeType":"229","messageId":"230","endLine":35,"endColumn":54},{"ruleId":"227","severity":1,"message":"233","line":35,"column":56,"nodeType":"229","messageId":"230","endLine":35,"endColumn":73},{"ruleId":"227","severity":1,"message":"237","line":3,"column":16,"nodeType":"229","messageId":"230","endLine":3,"endColumn":23},{"ruleId":"227","severity":1,"message":"273","line":4,"column":8,"nodeType":"229","messageId":"230","endLine":4,"endColumn":14},{"ruleId":"244","severity":1,"message":"245","line":9,"column":5,"nodeType":"246","messageId":"247","endLine":12,"endColumn":6},{"ruleId":"248","severity":1,"message":"249","line":49,"column":44,"nodeType":"250","messageId":"251","endLine":49,"endColumn":46},{"ruleId":"248","severity":1,"message":"262","line":69,"column":32,"nodeType":"250","messageId":"251","endLine":69,"endColumn":34},{"ruleId":"248","severity":1,"message":"262","line":73,"column":34,"nodeType":"250","messageId":"251","endLine":73,"endColumn":36},{"ruleId":"227","severity":1,"message":"274","line":42,"column":17,"nodeType":"229","messageId":"230","endLine":42,"endColumn":29},{"ruleId":"227","severity":1,"message":"275","line":42,"column":31,"nodeType":"229","messageId":"230","endLine":42,"endColumn":43},{"ruleId":"227","severity":1,"message":"237","line":2,"column":37,"nodeType":"229","messageId":"230","endLine":2,"endColumn":44},{"ruleId":"227","severity":1,"message":"276","line":7,"column":10,"nodeType":"229","messageId":"230","endLine":7,"endColumn":16},{"ruleId":"227","severity":1,"message":"259","line":7,"column":18,"nodeType":"229","messageId":"230","endLine":7,"endColumn":30},{"ruleId":"227","severity":1,"message":"277","line":9,"column":8,"nodeType":"229","messageId":"230","endLine":9,"endColumn":12},{"ruleId":"227","severity":1,"message":"257","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":14},{"ruleId":"227","severity":1,"message":"258","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":23},{"ruleId":"244","severity":1,"message":"245","line":12,"column":5,"nodeType":"246","messageId":"247","endLine":14,"endColumn":6},{"ruleId":"248","severity":1,"message":"262","line":39,"column":26,"nodeType":"250","messageId":"251","endLine":39,"endColumn":28},{"ruleId":"248","severity":1,"message":"249","line":61,"column":167,"nodeType":"250","messageId":"251","endLine":61,"endColumn":169},{"ruleId":"278","severity":1,"message":"279","line":73,"column":17,"nodeType":"280","messageId":"281","endLine":73,"endColumn":23},{"ruleId":"248","severity":1,"message":"262","line":102,"column":87,"nodeType":"250","messageId":"251","endLine":102,"endColumn":89},{"ruleId":"248","severity":1,"message":"262","line":112,"column":62,"nodeType":"250","messageId":"251","endLine":112,"endColumn":64},{"ruleId":"227","severity":1,"message":"282","line":2,"column":23,"nodeType":"229","messageId":"230","endLine":2,"endColumn":30},{"ruleId":"248","severity":1,"message":"249","line":116,"column":44,"nodeType":"250","messageId":"251","endLine":116,"endColumn":46},{"ruleId":"227","severity":1,"message":"283","line":2,"column":38,"nodeType":"229","messageId":"230","endLine":2,"endColumn":44},{"ruleId":"266","severity":1,"message":"267","line":45,"column":25,"nodeType":"268","endLine":45,"endColumn":124},{"ruleId":"227","severity":1,"message":"284","line":1,"column":8,"nodeType":"229","messageId":"230","endLine":1,"endColumn":12},{"ruleId":"227","severity":1,"message":"285","line":4,"column":10,"nodeType":"229","messageId":"230","endLine":4,"endColumn":23},{"ruleId":"223","replacedBy":"286"},{"ruleId":"225","replacedBy":"287"},{"ruleId":"227","severity":1,"message":"288","line":2,"column":25,"nodeType":"229","messageId":"230","endLine":2,"endColumn":30},{"ruleId":"227","severity":1,"message":"289","line":2,"column":46,"nodeType":"229","messageId":"230","endLine":2,"endColumn":51},{"ruleId":"227","severity":1,"message":"290","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":16},{"ruleId":"227","severity":1,"message":"237","line":2,"column":10,"nodeType":"229","messageId":"230","endLine":2,"endColumn":17},{"ruleId":"248","severity":1,"message":"262","line":12,"column":47,"nodeType":"250","messageId":"251","endLine":12,"endColumn":49},{"ruleId":"248","severity":1,"message":"262","line":12,"column":81,"nodeType":"250","messageId":"251","endLine":12,"endColumn":83},{"ruleId":"227","severity":1,"message":"263","line":2,"column":17,"nodeType":"229","messageId":"230","endLine":2,"endColumn":21},{"ruleId":"227","severity":1,"message":"288","line":2,"column":31,"nodeType":"229","messageId":"230","endLine":2,"endColumn":36},{"ruleId":"227","severity":1,"message":"283","line":2,"column":38,"nodeType":"229","messageId":"230","endLine":2,"endColumn":44},{"ruleId":"227","severity":1,"message":"228","line":2,"column":43,"nodeType":"229","messageId":"230","endLine":2,"endColumn":49},{"ruleId":"227","severity":1,"message":"291","line":3,"column":25,"nodeType":"229","messageId":"230","endLine":3,"endColumn":36},{"ruleId":"227","severity":1,"message":"292","line":4,"column":10,"nodeType":"229","messageId":"230","endLine":4,"endColumn":24},{"ruleId":"244","severity":1,"message":"245","line":8,"column":5,"nodeType":"246","messageId":"247","endLine":10,"endColumn":6},{"ruleId":"227","severity":1,"message":"257","line":3,"column":18,"nodeType":"229","messageId":"230","endLine":3,"endColumn":22},{"ruleId":"227","severity":1,"message":"293","line":3,"column":24,"nodeType":"229","messageId":"230","endLine":3,"endColumn":30},{"ruleId":"227","severity":1,"message":"282","line":3,"column":32,"nodeType":"229","messageId":"230","endLine":3,"endColumn":39},{"ruleId":"227","severity":1,"message":"294","line":4,"column":8,"nodeType":"229","messageId":"230","endLine":4,"endColumn":24},{"ruleId":"227","severity":1,"message":"257","line":3,"column":18,"nodeType":"229","messageId":"230","endLine":3,"endColumn":22},{"ruleId":"227","severity":1,"message":"293","line":3,"column":24,"nodeType":"229","messageId":"230","endLine":3,"endColumn":30},{"ruleId":"227","severity":1,"message":"282","line":3,"column":32,"nodeType":"229","messageId":"230","endLine":3,"endColumn":39},{"ruleId":"227","severity":1,"message":"282","line":2,"column":23,"nodeType":"229","messageId":"230","endLine":2,"endColumn":30},{"ruleId":"227","severity":1,"message":"295","line":3,"column":10,"nodeType":"229","messageId":"230","endLine":3,"endColumn":17},{"ruleId":"227","severity":1,"message":"296","line":4,"column":8,"nodeType":"229","messageId":"230","endLine":4,"endColumn":13},{"ruleId":"227","severity":1,"message":"297","line":5,"column":8,"nodeType":"229","messageId":"230","endLine":5,"endColumn":18},{"ruleId":"266","severity":1,"message":"267","line":45,"column":25,"nodeType":"268","endLine":45,"endColumn":119},"no-native-reassign",["298"],"no-negated-in-lhs",["299"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'GridColumn' is defined but never used.","'submittedUsername' is assigned a value but never used.","'submittedPassword' is assigned a value but never used.",["298"],["299"],"'GridRow' is defined but never used.","'Divider' is defined but never used.","'Input' is defined but never used.","'messages' is assigned a value but never used.","'Container' is defined but never used.","'TextArea' is defined but never used.","'ButtonGroup' is defined but never used.","'Quill' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'quillToolbar' is assigned a value but never used.",["298"],["299"],"'Grid' is defined but never used.","'FaChevronDown' is defined but never used.","'FaPlusSquare' is defined but never used.","'FaUser' is defined but never used.","'FaUserAlt' is defined but never used.","Expected '!==' and instead saw '!='.","'List' is defined but never used.","'Checkbox' is defined but never used.","'channel_topic' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["298"],["299"],"'Route' is defined but never used.","'Switch' is defined but never used.","'jquery' is defined but never used.","'channel_name' is assigned a value but never used.","'channel_desc' is assigned a value but never used.","'FaPlus' is defined but never used.","'Chat' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'Segment' is defined but never used.","'Search' is defined but never used.","'logo' is defined but never used.","'BrowserRouter' is defined but never used.",["298"],["299"],"'Image' is defined but never used.","'Popup' is defined but never used.","'BsStar' is defined but never used.","'FaPenSquare' is defined but never used.","'BsPencilSquare' is defined but never used.","'Header' is defined but never used.","'AddUserSearchbar' is defined but never used.","'VscInfo' is defined but never used.","'Axios' is defined but never used.","'configData' is defined but never used.","no-global-assign","no-unsafe-negation"]